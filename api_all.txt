API Reference # Scene Scene Simulator Coupler Force Field Mesh Camera Camera Entity RigidEntity gs.RigidEntity gs.RigidLink gs.RigidJoint gs.RigidGeom gs.RigidVisGeom Options gs.options.Options Simulator, Coupler & Solver Options gs.options.SimOptions gs.options.CouplerOptions gs.options.ToolOptions gs.options.RigidOptions gs.options.AvatarOptions gs.options.MPMOptions gs.options.SPHOptions gs.options.PBDOptions gs.options.FEMOptions gs.options.SFOptions Morph gs.morphs.Morph Primitive gs.morphs.Primitive gs.morphs.Box gs.morphs.Sphere gs.morphs.Cylinder gs.morphs.Plane FileMorph gs.morphs.FileMorph gs.morphs.Mesh gs.morphs.URDF gs.morphs.MJCF gs.morphs.Terrain gs.morphs.Drone Renderer gs.renderers.Renderer gs.renderers.Rasterizer gs.renderers.RayTracer Surface gs.surfaces.Surface Plastic gs.surfaces.Plastic gs.surfaces.Rough gs.surfaces.Smooth gs.surfaces.Reflective gs.surfaces.Collision gs.surfaces.Default Metal gs.surfaces.Metal gs.surfaces.Iron gs.surfaces.Aluminium gs.surfaces.Copper gs.surfaces.Gold Emission gs.surfaces.Emission Glass gs.surfaces.Glass gs.surfaces.Water Texture gs.textures.Texture gs.textures.ColorTexture gs.textures.ImageTexture Viewer & Visualization gs.options.ViewerOptions gs.options.VisOptions
gs.surfaces.Aluminium # class genesis.options.surfaces. Aluminium ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , metal_type : str = 'aluminium' , diffuse_texture : Texture | None = None ) [source] # Shortcut for an metallic surface with metal_type = ‘aluminium’ .
gs.options.AvatarOptions # class genesis.options.solvers. AvatarOptions ( * , dt : float | None = None , enable_collision : bool = False , enable_self_collision : bool = False , max_collision_pairs : int = 100 , IK_max_targets : int = 6 ) [source] # Options configuring the AvatarSolver. AvatarEntity is similar to RigidEntity, but without internal physics. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. enable_collision ( float , optional ) – Whether to enable collision detection. Defaults to False. enable_self_collision ( float , optional ) – Whether to enable self collision within each entity. Defaults to False. max_collision_pairs ( int , optional ) – Maximum number of collision pairs. Defaults to 100. IK_max_targets ( int , optional ) – Maximum number of IK targets. Increasing this doesn’t affect IK solving speed, but will increase memory usage. Defaults to 6.
gs.morphs.Box # class genesis.options.morphs. Box ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , fixed : bool = False , lower : tuple | None = None , upper : tuple | None = None , size : tuple | None = None ) [source] # Morph defined by a box shape. Note Either [ pos and size ] or [ lower and upper ] should be specified. The latter has a higher priority. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. lower ( tuple , shape ( 3 , ) , optional ) – The lower corner of the box in meters. Defaults to None. upper ( tuple , shape ( 3 , ) , optional ) – The upper corner of the box in meters. Defaults to None. size ( tuple , shape ( 3 , ) , optional ) – The size of the box in meters. Defaults to None. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. This is only used for RigidEntity.
Camera # class genesis.vis.camera. Camera ( visualizer , idx = 0 , model = 'pinhole' , res = (320, 320) , pos = (0.5, 2.5, 3.5) , lookat = (0.5, 0.5, 0.5) , up = (0.0, 0.0, 1.0) , fov = 30 , aperture = 2.8 , focus_dist = None , GUI = False , spp = 256 , denoise = True , near = 0.05 , far = 100.0 , transform = None ) [source] # Bases: RBC Genesis camera class. The camera can be used to render RGB, depth, and segmentation images. The camera can use either rasterizer or raytracer for rendering, specified by scene.renderer . The camera also comes with handy tools such as video recording. Parameters : visualizer ( genesis.Visualizer ) – The visualizer object that the camera is associated with. idx ( int ) – The index of the camera. model ( str ) – Specifies the camera model. Options are ‘pinhole’ or ‘thinlens’. res ( tuple of int , shape ( 2 , ) ) – The resolution of the camera, specified as a tuple (width, height). pos ( tuple of float , shape ( 3 , ) ) – The position of the camera in the scene, specified as (x, y, z). lookat ( tuple of float , shape ( 3 , ) ) – The point in the scene that the camera is looking at, specified as (x, y, z). up ( tuple of float , shape ( 3 , ) ) – The up vector of the camera, defining its orientation, specified as (x, y, z). fov ( float ) – The vertical field of view of the camera in degrees. aperture ( float ) – The aperture size of the camera, controlling depth of field. focus_dist ( float | None ) – The focus distance of the camera. If None, it will be auto-computed using pos and lookat . GUI ( bool ) – Whether to display the camera’s rendered image in a separate GUI window. spp ( int , optional ) – Samples per pixel. Defaults to 256. denoise ( bool ) – Whether to denoise the camera’s rendered image. near ( float ) – The near plane of the camera. far ( float ) – The far plane of the camera. transform ( np.ndarray , shape ( 4 , 4 ) , optional ) – The transform matrix of the camera. render ( rgb = True , depth = False , segmentation = False , colorize_seg = False , normal = False ) [source] # Render the camera view. Note that the segmentation mask can be colorized, and if not colorized, it will store an object index in each pixel based on the segmentation level specified in vis_options.segmentation_level . For example, if segmentation_level=’link’ , the segmentation mask will store link_idx , which can then be used to retrieve the actual link objects using scene.rigid_solver.links[link_idx] . Parameters : rgb ( bool , optional ) – Whether to render an RGB image. depth ( bool , optional ) – Whether to render a depth image. segmentation ( bool , optional ) – Whether to render the segmentation mask. colorize_seg ( bool , optional ) – If True, the segmentation mask will be colorized. normal ( bool , optional ) – Whether to render the surface normal. Returns : rgb_arr ( np.ndarray ) – The rendered RGB image. depth_arr ( np.ndarray ) – The rendered depth image. seg_arr ( np.ndarray ) – The rendered segmentation mask. normal_arr ( np.ndarray ) – The rendered surface normal. set_pose ( transform = None , pos = None , lookat = None , up = None ) [source] # Set the pose of the camera. Note that transform has a higher priority than pos , lookat , and up . If transform is provided, the camera pose will be set based on the transform matrix. Otherwise, the camera pose will be set based on pos , lookat , and up . Parameters : transform ( np.ndarray , shape ( 4 , 4 ) , optional ) – The transform matrix of the camera. pos ( array-like , shape ( 3 , ) , optional ) – The position of the camera. lookat ( array-like , shape ( 3 , ) , optional ) – The lookat point of the camera. up ( array-like , shape ( 3 , ) , optional ) – The up vector of the camera. set_params ( fov = None , aperture = None , focus_dist = None ) [source] # Update the camera parameters. Parameters : fov ( float , optional ) – The vertical field of view of the camera. aperture ( float , optional ) – The aperture of the camera. Only supports ‘thinlens’ camera model. focus_dist ( float , optional ) – The focus distance of the camera. Only supports ‘thinlens’ camera model. start_recording ( ) [source] # Start recording on the camera. After recording is started, all the rgb images rendered by camera.render() will be stored, and saved to a video file when camera.stop_recording() is called. pause_recording ( ) [source] # Pause recording on the camera. After recording is paused, the rgb images rendered by camera.render() will not be stored. Recording can be resumed by calling camera.start_recording() again. stop_recording ( save_to_filename = None , fps = 60 ) [source] # Stop recording on the camera. Once this is called, all the rgb images stored so far will be saved to a video file. If save_to_filename is None, the video file will be saved with the name ‘{caller_file_name}_cam_{camera.idx}.mp4’. Parameters : save_to_filename ( str , optional ) – Name of the output video file. If not provided, the name will be default to the name of the caller file, with camera idx, a timestamp and ‘.mp4’ extension. fps ( int , optional ) – The frames per second of the video file. property is_built # Whether the camera is built. property idx # The integer index of the camera. property uid # The unique ID of the camera property model # pinhole or thinlens . Type : The camera model property res # The resolution of the camera. property fov # The field of view of the camera. property aperture # The aperture of the camera. property focal_len # The focal length for thinlens camera. Returns -1 for pinhole camera. property focus_dist # The focus distance of the camera. property GUI # Whether the camera will display the rendered images in a separate window. property spp # Samples per pixel of the camera. property denoise # Whether the camera will denoise the rendered image in raytracer. property near # The near plane of the camera. property far # The far plane of the camera. property aspect_ratio # The aspect ratio of the camera. property pos # The current position of the camera. property lookat # The current lookat point of the camera. property up # The current up vector of the camera. property transform # The current transform matrix of the camera. property extrinsics # The current extrinsics matrix of the camera. property intrinsics # The current intrinsics matrix of the camera.
gs.surfaces.Collision # class genesis.options.surfaces. Collision ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = None , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = 1.0 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_texture : Texture | None = None ) [source] # Bases: Plastic Default surface type for collision geometry with a grey color.
gs.textures.ColorTexture # class genesis.options.textures. ColorTexture ( * , color : tuple = (1.0, 1.0, 1.0) ) [source] # Bases: Texture A texture with a single color. Parameters : color ( tuple , shape ( 3 , ) ) – RGB color value.
gs.surfaces.Copper # class genesis.options.surfaces. Copper ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , metal_type : str = 'copper' , diffuse_texture : Texture | None = None ) [source] # Shortcut for an metallic surface with metal_type = ‘copper’ .
Coupler # class genesis.engine.coupler. Coupler ( simulator , options ) [source] # This class handles all the coupling between different solvers. build ( ) [source] # reset ( ) [source] # mpm_grid_op ( f: <taichi._lib.core.taichi_python.DataType object at 0x7f59b83cd6f0> , t: <taichi._lib.core.taichi_python.DataType object at 0x7f59bd35b730> ) [source] # This combines mpm’s grid_op with coupling operations. If we decouple grid_op with coupling with different solvers, we need to run grid-level operations for each coupling pair, which is inefficient. mpm_surface_to_particle ( f: <taichi._lib.core.taichi_python.DataType object at 0x7f59b83cd6f0> ) [source] # fem_surface_force ( f: <taichi._lib.core.taichi_python.DataType object at 0x7f59b83cd6f0> ) [source] # sph_rigid ( f: <taichi._lib.core.taichi_python.DataType object at 0x7f59b83cd6f0> ) [source] # pbd_rigid ( f: <taichi._lib.core.taichi_python.DataType object at 0x7f59b83cd6f0> ) [source] # preprocess ( f ) [source] # couple ( f ) [source] # couple_grad ( f ) [source] # property active_solvers # All the active solvers managed by the scene’s simulator.
gs.options.CouplerOptions # class genesis.options.solvers. CouplerOptions ( * , rigid_mpm : bool = True , rigid_sph : bool = True , rigid_pbd : bool = True , rigid_fem : bool = True , mpm_sph : bool = True , mpm_pbd : bool = True , fem_mpm : bool = True , fem_sph : bool = True ) [source] # Options configuring the inter-solver coupling. Parameters : rigid_mpm ( bool , optional ) – Whether to enable coupling between rigid and MPM solvers. Defaults to True. rigid_sph ( bool , optional ) – Whether to enable coupling between rigid and SPH solvers. Defaults to True. rigid_pbd ( bool , optional ) – Whether to enable coupling between rigid and PBD solvers. Defaults to True. rigid_fem ( bool , optional ) – Whether to enable coupling between rigid and FEM solvers. Defaults to True. mpm_sph ( bool , optional ) – Whether to enable coupling between MPM and SPH solvers. Defaults to True. mpm_pbd ( bool , optional ) – Whether to enable coupling between MPM and PBD solvers. Defaults to True. fem_mpm ( bool , optional ) – Whether to enable coupling between FEM and MPM solvers. Defaults to True. fem_sph ( bool , optional ) – Whether to enable coupling between FEM and SPH solvers. Defaults to True.
gs.morphs.Cylinder # class genesis.options.morphs. Cylinder ( * args , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , fixed : bool = False , height : float = 1.0 , radius : float = 0.5 ) [source] # Morph defined by a cylinder shape. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. height ( float , optional ) – The height of the cylinder in meters. Defaults to 1.0. radius ( float , optional ) – The radius of the cylinder in meters. Defaults to 0.5. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. This is only used for RigidEntity.
gs.surfaces.Default # class genesis.options.surfaces. Default ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = None , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_trans : float | None = 0.0 , diffuse_trans : float | None = 0.0 ) [source] # Bases: BSDF The default surface type used in Genesis. This is just an alias for Plastic .
gs.morphs.Drone # class genesis.options.morphs. Drone ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , file : Any = '' , scale : float | tuple = 1.0 , convexify : bool | None = None , recompute_inertia : bool = False , model : str = 'CF2X' , fixed : bool = False , prioritize_urdf_material : bool = False , COM_link_name : str = 'center_of_mass_link' , propellers_link_names : List [ str ] = ['prop0_link', 'prop1_link', 'prop2_link', 'prop3_link'] , propellers_spin : List [ int ] = [-1, 1, -1, 1] ) [source] # Morph loaded from a URDF file for creating a DroneEntity . Note Visual geom in the propeller links will be used for spinning animation. Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. convexify ( bool , optional ) – Whether to convexify the entity. When convexify is True, all the meshes in the entity will be converted to a convex hull. If not given, it defaults to True for RigidEntity and False for other deformable entities. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. collision ( bool , optional ) – NB : Drone doesn’t support collision checking for now. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. prioritize_urdf_material ( bool , optional ) – Sometimes a geom in a urdf file will be assigned a color, and the geom asset file also contains its own visual material. This parameter controls whether to prioritize the URDF-defined material over the asset’s own material. Defaults to False. model ( str , optional ) – The model of the drone. Defaults to ‘CF2X’. Supported models are ‘CF2X’, ‘CF2P’, and ‘RACE’. COM_link_name ( str , optional ) – The name of the link that represents the center of mass. Defaults to ‘center_of_mass_link’. propellers_link_names ( list of str , optional ) – The names of the links that represent the propellers. Defaults to [‘prop0_link’, ‘prop1_link’, ‘prop2_link’, ‘prop3_link’]. propellers_spin ( list of int , optional ) – The spin direction of the propellers. 1: CCW, -1: CW. Defaults to [-1, 1, -1, 1].
gs.surfaces.Emission # class genesis.options.surfaces. Emission ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = None , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None ) [source] # Emission surface. This surface emits light. Note that in Genesis’s ray tracing pipeline, lights are not a special type of objects, but simply entities with emission surfaces. Parameters : emissive ( tuple | None , optional ) – Emissive color of the surface. Shortcut for emissive_texture with a single color. emissive_texture ( gs.textures.Texture | None , optional ) – Emissive texture of the surface.
gs.options.FEMOptions # class genesis.options.solvers. FEMOptions ( * , dt : float | None = None , gravity : tuple | None = None , damping : float | None = 0.0 , floor_height : float = None ) [source] # Options configuring the FEMSolver. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. gravity ( tuple , optional ) – Gravity force in N/kg. If none, it will inherit from SimOptions . Defaults to None. damping ( float , optional ) – Damping factor. Defaults to 45.0. floor_height ( float , optional ) – Height of the floor in meters. If none, it will inherit from SimOptions . Defaults to None.
gs.morphs.FileMorph # class genesis.options.morphs. FileMorph ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , file : Any = '' , scale : float | tuple = 1.0 , convexify : bool | None = None , recompute_inertia : bool = False ) [source] # Morph loaded from a file. Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. convexify ( bool , optional ) – Whether to convexify the entity. When convexify is True, all the meshes in the entity will each be converted to a convex hull. If not given, it defaults to True for RigidEntity and False for other deformable entities. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity.
Force Field # class genesis.engine.force_fields. ForceField [source] # Base class for all force fields. This class should not be used directly. Note It’s called ForceField , but it’s actually an acceleration field, as force doesn’t have a notion of spatial density. activate ( ) [source] # Activate the force field. deactivate ( ) [source] # Deactivate the force field. get_acc ( pos , vel , t , i ) [source] # property active # Whether the force field is active. class genesis.engine.force_fields. Constant ( direction = (1, 0, 0) , strength = 1.0 ) [source] # Constant force field with a static acceleration everywhere. Parameters: # direction: array_like, shape=(3,) The direction of the force (acceleration). Will be normalized. strength: float The strength of the force (acceleration). property direction # property strength # class genesis.engine.force_fields. Wind ( direction = (1, 0, 0) , strength = 1.0 , radius = 1 , center = (0, 0, 0) ) [source] # Wind force field with a static acceleration in a cylindrical region. Parameters: # direction: array_like, shape=(3,) The direction of the wind. Will be normalized. strength: float The strength of the wind. radius: float The radius of the cylinder. center: array_like, shape=(3,) The center of the cylinder. property direction # property strength # property radius # property center # class genesis.engine.force_fields. Point ( strength = 1.0 , position = (0, 0, 0) , falloff_pow = 0.0 , flow = 1.0 ) [source] # Point force field gives a constant force towards (positive strength) or away from (negative strength) the point. Parameters: # strength: float The strength of the wind. position: array_like, shape=(3,) The position of the point. flow: float The flow of the force field. falloff_pow: float The power of the falloff. property strength # property position # class genesis.engine.force_fields. Drag ( linear = 0.0 , quadratic = 0.0 ) [source] # Drag force field gives a force opposite to the velocity. Parameters: # linear: float The linear drag coefficient. quadratic: float The quadratic drag coefficient. property linear # property quadratic # class genesis.engine.force_fields. Noise ( strength = 1.0 ) [source] # Noise force field samples random noise at each point. property strength # class genesis.engine.force_fields. Vortex ( direction = (0.0, 0.0, 1.0) , center = (0.0, 0.0, 0.0) , strength_perpendicular = 20.0 , strength_radial = 0.0 , falloff_pow = 2.0 , falloff_min = 0.01 , falloff_max = inf , damping = 0.0 ) [source] # Vortex force field revolving around z-axis. Parameters: # strength_perpendicular: float The strength of the vortex flow in the perpendicular direction. Positive for counterclockwise, negative for clockwise. strength_radial: float The strength of the vortex flow in the radial direction. Positive for inward, negative for outward. center: array_like, shape=(3,) The center of the vortex. falloff_pow: float The power of the falloff. falloff_min: float The minimum distance (in meters) for the falloff. Under this distance, the force is effective with full strength. falloff_max: float The maximum distance (in meters) for the falloff. Above this distance, the force is ineffective. property direction # property radius # property center # property strength_perpendicular # property strength_radial # property falloff_pow # property falloff_min # property falloff_max # class genesis.engine.force_fields. Turbulence ( strength = 1.0 , frequency = 3 , flow = 0.0 , seed = None ) [source] # Turbulence force field generated using Perlin noise. Parameters: # strength: float The strength of the turbulence. frequency: float The spatial frequency of repeated patterns used for Perlin noise. flow: float The flow of the turbulence. seed: int | None The seed for the Perlin noise. property strength # property frequency # class genesis.engine.force_fields. Custom ( func ) [source] # Custom force field with a user-defined force(acceleration) function f(pos, vel, t, i) . Parameters: # func: A callable taichi func (a python function wrapped by @ti.func ) The acceleration function. Must have the signature f(pos: ti.types.vector(3), vel: ti.types.vector(3), t: ti.f32) -> ti.types.vector(3) . class genesis.engine.force_fields. PerlinNoiseField ( wrap_size = 256 , frequency = 10 , seed = None , seed_offset = 0 ) [source] # Perlin noise field for generating 3D noise. Each PerlinNoiseField object has will create a different noise field.
gs.surfaces.Glass # class genesis.options.surfaces. Glass ( * , color : tuple | None = None , opacity : float | None = None , roughness : float = 0.0 , metallic : float | None = None , emissive : tuple | None = None , ior : float = 1.5 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , subsurface : bool = False , thickness : float | None = None , thickness_texture : Texture | None = None , specular_texture : Texture | None = None , transmission_texture : Texture | None = None ) [source] # Base class for all surfaces types in Genesis. A Surface object encapsulates all visual information used for rendering an entity or its sub-components (links, geoms, etc.) The surface contains different types textures: diffuse_texture, specular_texture, roughness_texture, metallic_texture, normal_texture, and emissive_texture. Each one of them is a gs.textures.Texture object. Tip If any of the textures only has single value (instead of a map), you can use the shortcut attribute (e.g., color , roughness , metallic , emissive ) instead of creating a texture object. Note This class should not be instantiated directly. Parameters : color ( tuple | None , optional ) – Diffuse color of the surface. Shortcut for diffuse_texture with a single color. roughness ( float | None , optional ) – Roughness of the surface. Shortcut for roughness_texture with a single value. ior ( float , optional ) – Index of Refraction. subsurface ( bool ) – Whether apply a simple BSSRDF subsurface to the glass material. thickness ( float | None , optional ) – The thickness of the top surface when ‘subsurface’ is set to True, that is, the maximum distance of subsurface scattering. Shortcut for thickness_texture with a single value. metallic ( float | None , optional ) – Metallicness of the surface. Shortcut for metallic_texture with a single value. emissive ( tuple | None , optional ) – Emissive color of the surface. Shortcut for emissive_texture with a single color. specular_texture ( gs.textures.Texture | None , optional ) – Specular texture of the surface. transmission_texture ( gs.textures.Texture | None , optional ) – Transmission texture of the surface. opacity_texture ( gs.textures.Texture | None , optional ) – Opacity texture of the surface. roughness_texture ( gs.textures.Texture | None , optional ) – Roughness texture of the surface. metallic_texture ( gs.textures.Texture | None , optional ) – Metallic texture of the surface. normal_texture ( gs.textures.Texture | None , optional ) – Normal texture of the surface. emissive_texture ( gs.textures.Texture | None , optional ) – Emissive texture of the surface. thickness_texture ( gs.textures.Texture | None , optional ) – The thickness of the top surface. default_roughness ( float , optional ) – Default roughness value when roughness is not set and the asset does not have a roughness texture. Defaults to 1.0. vis_mode ( str | None , optional ) – How the entity should be visualized. Possible values are [‘visual’, ‘particle’, ‘collision’, ‘sdf’, ‘recon’]. ’visual’: Render the entity’s visual geometry. ’collision’: Render the entity’s collision geometry. ’particle’: Render the entity’s particle representation (if applicable). ’sdf’: Render the reconstructed surface mesh of the entity’s sdf. ’recon’: Render the reconstructed surface mesh of the entity’s particle representation. smooth ( bool , optional ) – Whether to smooth face normals by interpolating vertex normals. double_sided ( bool | None , optional ) – Whether to render both sides of the surface. Useful for non-watertight 2D objects. Defaults to True for Cloth material and False for others. normal_diff_clamp ( float , optional ) – Controls the threshold for computing surface normals by interpolating vertex normals. recon_backend ( str , optional ) – Backend for surface reconstruction. Possible values are [‘splashsurf’, ‘openvdb’]. generate_foam ( bool , optional ) – Whether to generate foam particles for visual effects for particle-based entities. foam_options ( gs.options.FoamOptions , optional ) – Options for foam generation.
gs.surfaces.Gold # class genesis.options.surfaces. Gold ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , metal_type : str = 'gold' , diffuse_texture : Texture | None = None ) [source] # Shortcut for an metallic surface with metal_type = ‘gold’ .
gs.textures.ImageTexture # class genesis.options.textures. ImageTexture ( * , image_path : str | None = None , image_array : Any | None = None , image_color : tuple | None = (1.0, 1.0, 1.0, 1.0) , encoding : str = 'srgb' ) [source] # Bases: Texture A texture with a texture map (image). Parameters : image_path ( str , optional ) – Path to the image file. image_array ( np.ndarray , optional ) – Image array. image_color ( tuple , optional ) – The base color which will be multiplied with the image color. Default is (1.0, 1.0, 1.0, 1.0). encoding ( str ) – The encoding way of the image. Possible values are [‘srgb’, ‘linear’]. ’srgb’: Encoding of some RGB images. ’linear’: All generic images, such as opacity, roughness and normal, should be encoded with ‘linear’.
Viewer & Visualization # gs.options.ViewerOptions ViewerOptions gs.options.VisOptions VisOptions
gs.surfaces.Iron # class genesis.options.surfaces. Iron ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , metal_type : str = 'iron' , diffuse_texture : Texture | None = None ) [source] # Shortcut for an metallic surface with metal_type = ‘iron’ .
gs.morphs.Mesh # class genesis.options.morphs. Mesh ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , file : Any = '' , scale : float | tuple = 1.0 , convexify : bool | None = None , recompute_inertia : bool = False , parse_glb_with_trimesh : bool = False , fixed : bool = False , group_by_material : bool = True , merge_submeshes_for_collision : bool = True , decimate : bool = True , decimate_face_num : int = 500 , decompose_nonconvex : bool | None = None , coacd_options : CoacdOptions | None = None , order : int = 1 , mindihedral : int = 10 , minratio : float = 1.1 , nobisect : bool = True , quality : bool = True , verbose : int = 0 , force_retet : bool = False ) [source] # Morph loaded from a mesh file. Note In order to speed up simulation, the loaded mesh will first be decimated (simplified) to a target number of faces, followed by convexification (for collision mesh only). Such process can be disabled by setting decimate and convexify to False. Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. convexify ( bool , optional ) – Whether to convexify the entity. When convexify is True, all the meshes in the entity will be converted to a convex hull. If not given, it defaults to True for RigidEntity and False for other deformable entities. decompose_nonconvex ( bool , optional ) – Whether to decompose meshes into convex components, if input mesh is nonconvex and convexify=False . We use coacd for this decomposition process. If not given, it defaults to True for RigidEntity and False for other deformable entities. coacd_options ( CoacdOptions , optional ) – Options for configuring coacd convex decomposition. Needs to be a gs.options.CoacdOptions object. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity. parse_glb_with_trimesh ( bool , optional ) – Whether to use trimesh to load glb files. Defaults to False, in which case pygltflib will be used. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. This is only used for RigidEntity. group_by_material ( bool , optional ) – Whether to group submeshes by their visual material type defined in the asset file. Defaults to True. This is only used for RigidEntity. merge_submeshes_for_collision ( bool , optional ) – Whether to merge submeshes for collision. Defaults to True. This is only used for RigidEntity. decimate ( bool , optional ) – Whether to decimate (simplify) the mesh. Defaults to True. This is only used for RigidEntity. decimate_face_num ( int , optional ) – The number of faces to decimate to. Defaults to 500. This is only used for RigidEntity. order ( int , optional ) – The order of the FEM mesh. Defaults to 1. This is only used for FEMEntity. mindihedral ( int , optional ) – The minimum dihedral angle in degrees during tetraheralization. Defaults to 10. This is only used for Volumetric Entity that requires tetraheralization. minratio ( float , optional ) – The minimum tetrahedron quality ratio during tetraheralization. Defaults to 1.1. This is only used for Volumetric Entity that requires tetraheralization. nobisect ( bool , optional ) – Whether to disable bisection during tetraheralization. Defaults to True. This is only used for Volumetric Entity that requires tetraheralization. quality ( bool , optional ) – Whether to improve quality during tetraheralization. Defaults to True. This is only used for Volumetric Entity that requires tetraheralization. verbose ( int , optional ) – The verbosity level during tetraheralization. Defaults to 0. This is only used for Volumetric Entity that requires tetraheralization. force_retet ( bool , optional ) – Whether to force re-tetraheralization. Defaults to False. This is only used for Volumetric Entity that requires tetraheralization.
gs.surfaces.Metal # class genesis.options.surfaces. Metal ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , metal_type : str | None = 'iron' , diffuse_texture : Texture | None = None ) [source] # Metal surface. Parameters : color ( tuple | None , optional ) – Diffuse color of the surface. Shortcut for diffuse_texture with a single color. roughness ( float | None , optional ) – Roughness of the surface. Shortcut for roughness_texture with a single value. metallic ( float | None , optional ) – Metallicness of the surface. Shortcut for metallic_texture with a single value. emissive ( tuple | None , optional ) – Emissive color of the surface. Shortcut for emissive_texture with a single color. metal_type ( str , optional ) – Type of metal, indicating a specific index of refraction (IOR). Possible values are [‘aluminium’, ‘gold’, ‘copper’, ‘brass’, ‘iron’, ‘titanium’, ‘vanadium’, ‘lithium’]. diffuse_texture ( gs.textures.Texture | None , optional ) – Diffuse (basic color) texture of the surface. opacity_texture ( gs.textures.Texture | None , optional ) – Opacity texture of the surface. roughness_texture ( gs.textures.Texture | None , optional ) – Roughness texture of the surface. metallic_texture ( gs.textures.Texture | None , optional ) – Metallic texture of the surface. normal_texture ( gs.textures.Texture | None , optional ) – Normal texture of the surface. emissive_texture ( gs.textures.Texture | None , optional ) – Emissive texture of the surface. default_roughness ( float , optional ) – Default roughness value when roughness is not set and the asset does not have a roughness texture. Defaults to 1.0. vis_mode ( str | None , optional ) – How the entity should be visualized. Possible values are [‘visual’, ‘particle’, ‘collision’, ‘sdf’, ‘recon’]. ’visual’: Render the entity’s visual geometry. ’collision’: Render the entity’s collision geometry. ’particle’: Render the entity’s particle representation (if applicable). ’sdf’: Render the reconstructed surface mesh of the entity’s sdf. ’recon’: Render the reconstructed surface mesh of the entity’s particle representation. smooth ( bool , optional ) – Whether to smooth face normals by interpolating vertex normals. double_sided ( bool | None , optional ) – Whether to render both sides of the surface. Useful for non-watertight 2D objects. Defaults to True for Cloth material and False for others. normal_diff_clamp ( float , optional ) – Controls the threshold for computing surface normals by interpolating vertex normals. recon_backend ( str , optional ) – Backend for surface reconstruction. Possible values are [‘splashsurf’, ‘openvdb’]. generate_foam ( bool , optional ) – Whether to generate foam particles for visual effects for particle-based entities. foam_options ( gs.options.FoamOptions , optional ) – Options for foam generation.
gs.morphs.MJCF # class genesis.options.morphs. MJCF ( * , pos : tuple | None = None , euler : tuple | None = None , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = True , file : Any = '' , scale : float | tuple = 1.0 , convexify : bool | None = None , recompute_inertia : bool = False ) [source] # Morph loaded from a MJCF file. This morph only supports RigidEntity Note MJCF file always contains a worldbody, which we will skip during loading. The robots/objects in MJCF come with their own baselink pose. If pos , euler , or quat is specified, it will override the baselink pose in the MJCF file. The current version of Genesis asumes there’s only one child of the worldbody. However, it’s possible that a MJCF file contains a scene, not just a single robot, in which case the worldbody will have multiple kinematic trees. We will support such cases in the future. Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity’s baselink in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity’s baselink in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity’s baselink. If specified, euler will be ignored. Defaults to None. convexify ( bool , optional ) – Whether to convexify the entity. When convexify is True, all the meshes in the entity will be converted to a convex hull. If not given, it defaults to True for RigidEntity and False for other deformable entities. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to True.
gs.morphs.Morph # class genesis.options.morphs. Morph ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False ) [source] # This is the base class for all genesis morphs. A morph in genesis is a hybrid concept, encapsulating both the geometry and pose information of an entity. This includes shape primitives, meshes, URDF, MJCF, Terrain, and soft robot description files. Note This class should not be instantiated directly. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity.
gs.options.MPMOptions # class genesis.options.solvers. MPMOptions ( * , dt : float | None = None , gravity : tuple | None = None , particle_size : float | None = None , grid_density : float = 64 , enable_CPIC : bool = False , lower_bound : tuple = (-1.0, -1.0, 0.0) , upper_bound : tuple = (1.0, 1.0, 1.0) , use_sparse_grid : bool = False , leaf_block_size : int = 8 ) [source] # Options configuring the MPMSolver. Note MPM is a hybrid lagrangian-eulerian method for simulating soft materials. In the eulerian phase, it uses a grid representation. The upper_bound and lower_bound specify the simulation domain, but a safety padding will be added to the actual grid boundary. Therefore, the actual boundary could be slightly tighter than the specified one. Note that the size of the domain affects the performance of the simulation, hence you should set it as tight as possible. use_sparse_grid and leaf_block_size are advanced parameters for sparse computation. Don’t touch them unless you know what you are doing. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. gravity ( tuple , optional ) – Gravity force in N/kg. If none, it will inherit from SimOptions . Defaults to None. particle_size ( float , optional ) – Particle diameter in meters. If not given, we will compute particle_size based on grid_density , where particle_size will be linearly proportional to the grid cell size. A reference value is particle_size = 0.01 for grid_density = 64 . Defaults to None. grid_density ( float , optional ) – Number of grid cells per meter. Defaults to 64. enable_CPIC ( bool , optional ) – Whether to enable CPIC (Compatible Particle-in-Cell) to support coupling with thin objects. Defaults to False. lower_bound ( tuple , shape ( 3 , ) , optional ) – Lower bound of the simulation domain. Defaults to (-1.0, -1.0, 0.0). upper_bound ( tuple , shape ( 3 , ) , optional ) – Upper bound of the simulation domain. Defaults to (1.0, 1.0, 1.0). use_sparse_grid ( bool , optional ) – Whether to use sparse grid. Defaults to False. Don’t touch unless you know what you are doing. leaf_block_size ( int , optional ) – Size of the leaf block for sparse mode. Defaults to 8.
gs.options.Options # class genesis.options.options. Options [source] # This is the base class for all gs.options.* classes. An Options object is a group of parameters for setting a specific component in the scene. Note This class should not be instantiated directly. Tip We build multiple classes based on this concept throughout Genesis, such as gs.options.morphs , gs.renderers , gs.surfaces , and gs.textures . Note that some of them, although inheriting from Options , are accessible directly under the gs namespace for convenience.
gs.options.PBDOptions # class genesis.options.solvers. PBDOptions ( * , dt : float | None = None , gravity : tuple | None = None , max_stretch_solver_iterations : int = 4 , max_bending_solver_iterations : int = 1 , max_volume_solver_iterations : int = 1 , max_density_solver_iterations : int = 1 , max_viscosity_solver_iterations : int = 1 , particle_size : float | None = 0.01 , hash_grid_res : tuple | None = None , hash_grid_cell_size : float | None = None , lower_bound : tuple = (-100.0, -100.0, 0.0) , upper_bound : tuple = (100.0, 100.0, 100.0) ) [source] # Options configuring the PBDSolver. Note If spatial hashing parameters are not given, we will compute them automatically this way: For hash_grid_cell_size , we will set it to be 1.25 * particle_size . For hash_grid_res , if a small bound is given, it’s used for the hash grid; otherwise, we use a default value of a 150^3 cube. Any grid bigger than that will results in too many cells hence not ideal. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. gravity ( tuple , optional ) – Gravity force in N/kg. If none, it will inherit from SimOptions . Defaults to None. max_stretch_solver_iterations ( int , optional ) – Maximum number of iterations for the solving stretch constraints. Defaults to 4. max_bending_solver_iterations ( int , optional ) – Maximum number of iterations for the solving bending constraints. Defaults to 1. max_volume_solver_iterations ( int , optional ) – Maximum number of iterations for the solving volume constraints. Defaults to 1. max_density_solver_iterations ( int , optional ) – Maximum number of iterations for the solving density constraints. Defaults to 1. max_viscosity_solver_iterations ( int , optional ) – Maximum number of iterations for the solving viscosity constraints. Defaults to 1. particle_size ( float , optional ) – Particle diameter in meters. Defaults to 1e-2. hash_grid_res ( tuple , optional ) – Size of the spatially-repetitive spatial hashing grid in meters. If none, it will be computed automatically. Defaults to None. hash_grid_cell_size ( float , optional ) – Size of the lattic cell of the spatial hashing grid in meters. This should be at least 1.25 * particle_size . If none, it will be computed automatically. Defaults to None. lower_bound ( tuple , shape ( 3 , ) , optional ) – Lower bound of the simulation domain. Defaults to (-100.0, -100.0, 0.0). upper_bound ( tuple , shape ( 3 , ) , optional ) – Upper bound of the simulation domain. Defaults to (100.0, 100.0, 100.0).
gs.morphs.Plane # class genesis.options.morphs. Plane ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , fixed : bool = True , normal : tuple = (0, 0, 1) ) [source] # Morph defined by a plane shape. Note Plane is a primitive with infinite size. Note that the pos is the center of the plane, but essetially only defines a point where the plane passes through. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The center position of the plane in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. normal ( tuple , shape ( 3 , ) , optional ) – The normal normal of the plane in its local frame. Defaults to (0, 0, 1). visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity.
gs.surfaces.Plastic # class genesis.options.surfaces. Plastic ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = None , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = 1.0 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_texture : Texture | None = None ) [source] # Bases: Surface Plastic surface is the most basic type of surface. Parameters : color ( tuple | None , optional ) – Diffuse color of the surface. Shortcut for diffuse_texture with a single color. roughness ( float | None , optional ) – Roughness of the surface. Shortcut for roughness_texture with a single value. metallic ( float | None , optional ) – Metallicness of the surface. Shortcut for metallic_texture with a single value. emissive ( tuple | None , optional ) – Emissive color of the surface. Shortcut for emissive_texture with a single color. ior ( float , optional ) – Index of Refraction. diffuse_texture ( gs.textures.Texture | None , optional ) – Diffuse (basic color) texture of the surface. specular_texture ( gs.textures.Texture | None , optional ) – Specular texture of the surface. opacity_texture ( gs.textures.Texture | None , optional ) – Opacity texture of the surface. roughness_texture ( gs.textures.Texture | None , optional ) – Roughness texture of the surface. metallic_texture ( gs.textures.Texture | None , optional ) – Metallic texture of the surface. normal_texture ( gs.textures.Texture | None , optional ) – Normal texture of the surface. emissive_texture ( gs.textures.Texture | None , optional ) – Emissive texture of the surface. default_roughness ( float , optional ) – Default roughness value when roughness is not set and the asset does not have a roughness texture. Defaults to 1.0. vis_mode ( str | None , optional ) – How the entity should be visualized. Possible values are [‘visual’, ‘particle’, ‘collision’, ‘sdf’, ‘recon’]. ’visual’: Render the entity’s visual geometry. ’collision’: Render the entity’s collision geometry. ’particle’: Render the entity’s particle representation (if applicable). ’sdf’: Render the reconstructed surface mesh of the entity’s sdf. ’recon’: Render the reconstructed surface mesh of the entity’s particle representation. smooth ( bool , optional ) – Whether to smooth face normals by interpolating vertex normals. double_sided ( bool | None , optional ) – Whether to render both sides of the surface. Useful for non-watertight 2D objects. Defaults to True for Cloth material and False for others. normal_diff_clamp ( float , optional ) – Controls the threshold for computing surface normals by interpolating vertex normals. recon_backend ( str , optional ) – Backend for surface reconstruction. Possible values are [‘splashsurf’, ‘openvdb’]. generate_foam ( bool , optional ) – Whether to generate foam particles for visual effects for particle-based entities. foam_options ( gs.options.FoamOptions , optional ) – Options for foam generation.
gs.morphs.Primitive # class genesis.options.morphs. Primitive ( * args , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , fixed : bool = False ) [source] # This is the base class for all shape-primitive morphs. Note This class should not be instantiated directly. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. This is only used for RigidEntity.
gs.renderers.Rasterizer # class genesis.options.renderers. Rasterizer [source] # Rasterizer renderer. This has no parameter to be configured. Note You can set which renderer to use for cameras, but the interactive viewer always uses the rasterizer rendering backend. If you want to configure properties like shadow, lights, etc., you should use gs.options.VisOptions instead.
gs.renderers.RayTracer # class genesis.options.renderers. RayTracer ( * , cuda_device : int = 0 , logging_level : str = 'warning' , state_limit : int = 33554432 , tracing_depth : int = 32 , rr_depth : int = 0 , rr_threshold : float = 0.95 , env_surface : Surface | None = None , env_radius : float = 1000.0 , env_pos : tuple = (0.0, 0.0, 0.0) , env_euler : tuple = (0.0, 0.0, 0.0) , env_quat : tuple | None = None , lights : list = [{'pos': (0.0, 0.0, 10.0), 'color': (1.0, 1.0, 1.0), 'intensity': 10.0, 'radius': 4.0}] , normal_diff_clamp : float = 180 ) [source] # RayTracer renderer. Note We use a environmental sphere wrapped around the scene to render the environment map (i.e. skybox). Parameters : cuda_device ( int , optional ) – CUDA device ID. Defaults to 0. logging_level ( str , optional ) – Logging level. Should be one of “debug”, “info”, “warning”. Defaults to “warning”. state_limit ( int , optional ) – State limit for raytracer integrator. Defaults to 2 ** 25. tracing_depth ( int , optional ) – Tracing depth. Defaults to 32. rr_depth ( int , optional ) – Russian Roulette depth. Defaults to 0. rr_threshold ( float , optional ) – Russian Roulette threshold. Defaults to 0.95. denoise ( bool , optional ) – Whether to use AI denoiser. Defaults to True. env_surface ( Optional [ Surface ] , optional ) – Environment surface. Defaults to None. env_radius ( float , optional ) – Environment radius. Defaults to 1000.0. env_pos ( tuple , optional ) – Environment position. Defaults to (0.0, 0.0, 0.0). env_euler ( tuple , optional ) – Environment Euler angles. Defaults to (0.0, 0.0, 0.0). env_quat ( Optional [ tuple ] , optional ) – Environment quaternion. Defaults to None. lights ( list of dict , optional ) – List of lights. Each light is a dictionary with keys ‘pos’, ‘color’, ‘intensity’, ‘radius’. Defaults to [{‘pos’ : (0.0, 0.0, 10.0), ‘color’ : (1.0, 1.0, 1.0), ‘intensity’ : 20.0, ‘radius’ : 4.0}]. normal_diff_clamp ( float , optional ) – Lower bound for direct face normal vs vertex normal for face normal interpolation. Range is [0, 180]. Defaults to 180.
gs.surfaces.Reflective # class genesis.options.surfaces. Reflective ( * , color : tuple | None = None , opacity : float | None = None , roughness : float = 0.01 , metallic : float | None = None , emissive : tuple | None = None , ior : float = 2.0 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_texture : Texture | None = None ) [source] # Bases: Plastic Shortcut for a reflective (smoother than Smooth ) plastic surface.
gs.renderers.Renderer # class genesis.options.renderers. Renderer [source] # This is the base class for all gs.renderers.* classes. Note that this is not an actual renderer, but rather a renderer configuration specifying which renderer to use and its parameters.
gs.options.RigidOptions # class genesis.options.solvers. RigidOptions ( * , dt : float | None = None , gravity : tuple | None = None , enable_collision : bool = True , enable_joint_limit : bool = True , enable_self_collision : bool = False , max_collision_pairs : int = 100 , integrator : integrator = integrator.approximate_implicitfast , IK_max_targets : int = 6 , constraint_solver : constraint_solver = constraint_solver.CG , iterations : int = 100 , tolerance : float = 1e-05 , ls_iterations : int = 50 , ls_tolerance : float = 0.01 , sparse_solve : bool = False , contact_resolve_time : float | None = None , use_contact_island : bool = False , use_hibernation : bool = False , hibernation_thresh_vel : float = 0.001 , hibernation_thresh_acc : float = 0.01 ) [source] # Options configuring the RigidSolver. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. gravity ( tuple , optional ) – Gravity force in N/kg. If none, it will inherit from SimOptions . Defaults to None. enable_collision ( bool , optional ) – Whether to enable collision detection. Defaults to True. enable_joint_limit ( bool , optional ) – Whether to enable joint limit. Defaults to True. enable_self_collision ( bool , optional ) – Whether to enable self collision within each entity. Defaults to False. max_collision_pairs ( int , optional ) – Maximum number of collision pairs. Defaults to 100. integrator ( gs.integrator , optional ) – Integrator type. Current supported integrators are ‘gs.integrator.Euler’, ‘gs.integrator.implicitfast’ and ‘gs.integrator.approximate_implicitfast’. Defaults to ‘approximate_implicitfast’. IK_max_targets ( int , optional ) – Maximum number of IK targets. Increasing this doesn’t affect IK solving speed, but will increase memory usage. Defaults to 6. constraint_solver ( gs.constraint_solver , optional ) – Constraint solver type. Current supported constraint solvers are ‘gs.constraint_solver.CG’ (conjugate gradient) and ‘gs.constraint_solver.Newton’ (Newton’s method). Defaults to ‘CG’. iterations ( int , optional ) – Number of iterations for the constraint solver. Defaults to 100. tolerance ( float , optional ) – Tolerance for the constraint solver. Defaults to 1e-5. ls_iterations ( int , optional ) – Number of line search iterations for the constraint solver. Defaults to 50. ls_tolerance ( float , optional ) – Tolerance for the line search. Defaults to 1e-2. sparse_solve ( bool , optional ) – Whether to exploit sparsity in the constraint system. Defaults to False. contact_resolve_time ( float , optional ) – Time to resolve a contact. The smaller the value, the more stiff the constraint. Defaults to 0.02. (called timeconst in https://mujoco.readthedocs.io/en/latest/modeling.html#solver-parameters ) use_contact_island ( bool , optional ) – Whether to use contact island to speed up contact resolving. Defaults to False. use_hibernation ( bool , optional ) – Whether to enable hibernation. Defaults to False. hibernation_thresh_vel ( float , optional ) – Velocity threshold for hibernation. Defaults to 1e-3. hibernation_thresh_acc ( float , optional ) – Acceleration threshold for hibernation. Defaults to 1e-2. Warning Hibernation hasn’t been robustly tested and will be fully supported soon.
gs.RigidEntity # class genesis.engine.entities.rigid_entity.rigid_entity. RigidEntity ( scene , solver , material , morph , surface , idx , idx_in_solver , link_start = 0 , joint_start = 0 , q_start = 0 , dof_start = 0 , geom_start = 0 , cell_start = 0 , vert_start = 0 , face_start = 0 , edge_start = 0 , vgeom_start = 0 , vvert_start = 0 , vface_start = 0 , visualize_contact = False ) [source] # Bases: Entity Entity class in rigid body systems. One rigid entity can be a robot, a terrain, a floating rigid body, etc. get_jacobian ( link ) [source] # Get the Jacobian matrix for a target link. Parameters : link ( RigidLink ) – The target link. Returns : jacobian – The Jacobian matrix of shape (n_envs, 6, entity.n_dofs) or (6, entity.n_dofs) if n_envs == 0. Return type : torch.Tensor inverse_kinematics ( link , pos = None , quat = None , init_qpos = None , respect_joint_limit = True , max_samples = 50 , max_solver_iters = 20 , damping = 0.01 , pos_tol = 0.0005 , rot_tol = 0.005 , pos_mask = [True, True, True] , rot_mask = [True, True, True] , max_step_size = 0.5 , return_error = False ) [source] # Compute inverse kinematics for a single target link. Parameters : link ( RigidLink ) – The link to be used as the end-effector. pos ( None | array_like , shape ( 3 , ) , optional ) – The target position. If None, position error will not be considered. Defaults to None. quat ( None | array_like , shape ( 4 , ) , optional ) – The target orientation. If None, orientation error will not be considered. Defaults to None. init_qpos ( None | array_like , shape ( n_dofs , ) , optional ) – Initial qpos used for solving IK. If None, the current qpos will be used. Defaults to None. respect_joint_limit ( bool , optional ) – Whether to respect joint limits. Defaults to True. max_samples ( int , optional ) – Number of resample attempts. Defaults to 50. max_solver_iters ( int , optional ) – Maximum number of solver iterations per sample. Defaults to 20. damping ( float , optional ) – Damping for damped least squares. Defaults to 0.01. pos_tol ( float , optional ) – Position tolerance for normalized position error (in meter). Defaults to 1e-4. rot_tol ( float , optional ) – Rotation tolerance for normalized rotation vector error (in radian). Defaults to 1e-4. pos_mask ( list , shape ( 3 , ) , optional ) – Mask for position error. Defaults to [True, True, True]. E.g.: If you only care about position along x and y, you can set it to [True, True, False]. rot_mask ( list , shape ( 3 , ) , optional ) – Mask for rotation axis alignment. Defaults to [True, True, True]. E.g.: If you only want the link’s Z-axis to be aligned with the Z-axis in the given quat, you can set it to [False, False, True]. max_step_size ( float , optional ) – Maximum step size in q space for each IK solver step. Defaults to 0.5. return_error ( bool , optional ) – Whether to return the final errorqpos. Defaults to False. Returns : qpos ( array_like, shape (n_dofs,) or (n_envs, n_dofs) ) – Solver qpos (joint positions). (optional) error_pose ( array_like, shape (6,) or (n_envs, 6) ) – Pose error for each target. The 6-vector is [err_pos_x, err_pos_y, err_pos_z, err_rot_x, err_rot_y, err_rot_z]. Only returned if return_error is True. inverse_kinematics_multilink ( links , poss = [] , quats = [] , init_qpos = None , respect_joint_limit = True , max_samples = 50 , max_solver_iters = 20 , damping = 0.01 , pos_tol = 0.0005 , rot_tol = 0.005 , pos_mask = [True, True, True] , rot_mask = [True, True, True] , max_step_size = 0.5 , return_error = False ) [source] # Compute inverse kinematics for multiple target links. Parameters : links ( list of RigidLink ) – List of links to be used as the end-effectors. poss ( list , optional ) – List of target positions. If empty, position error will not be considered. Defaults to None. quats ( list , optional ) – List of target orientations. If empty, orientation error will not be considered. Defaults to None. init_qpos ( array_like , shape ( n_dofs , ) , optional ) – Initial qpos used for solving IK. If None, the current qpos will be used. Defaults to None. respect_joint_limit ( bool , optional ) – Whether to respect joint limits. Defaults to True. max_samples ( int , optional ) – Number of resample attempts. Defaults to 50. max_solver_iters ( int , optional ) – Maximum number of solver iterations per sample. Defaults to 20. damping ( float , optional ) – Damping for damped least squares. Defaults to 0.01. pos_tol ( float , optional ) – Position tolerance for normalized position error (in meter). Defaults to 1e-4. rot_tol ( float , optional ) – Rotation tolerance for normalized rotation vector error (in radian). Defaults to 1e-4. pos_mask ( list , shape ( 3 , ) , optional ) – Mask for position error. Defaults to [True, True, True]. E.g.: If you only care about position along x and y, you can set it to [True, True, False]. rot_mask ( list , shape ( 3 , ) , optional ) – Mask for rotation axis alignment. Defaults to [True, True, True]. E.g.: If you only want the link’s Z-axis to be aligned with the Z-axis in the given quat, you can set it to [False, False, True]. max_step_size ( float , optional ) – Maximum step size in q space for each IK solver step. Defaults to 0.5. return_error ( bool , optional ) – Whether to return the final errorqpos. Defaults to False. Returns : qpos ( array_like, shape (n_dofs,) or (n_envs, n_dofs) ) – Solver qpos (joint positions). (optional) error_pose ( array_like, shape (6,) or (n_envs, 6) ) – Pose error for each target. The 6-vector is [err_pos_x, err_pos_y, err_pos_z, err_rot_x, err_rot_y, err_rot_z]. Only returned if return_error is True. plan_path ( qpos_goal , qpos_start = None , timeout = 5.0 , smooth_path = True , num_waypoints = 100 , ignore_collision = False , ignore_joint_limit = False , planner = 'RRTConnect' ) [source] # Plan a path from qpos_start to qpos_goal . Parameters : qpos_goal ( array_like ) – The goal state. qpos_start ( None | array_like , optional ) – The start state. If None, the current state of the rigid entity will be used. Defaults to None. timeout ( float , optional ) – The maximum time (in seconds) allowed for the motion planning algorithm to find a solution. Defaults to 5.0. smooth_path ( bool , optional ) – Whether to smooth the path after finding a solution. Defaults to True. num_waypoints ( int , optional ) – The number of waypoints to interpolate the path. If None, no interpolation will be performed. Defaults to 100. ignore_collision ( bool , optional ) – Whether to ignore collision checking during motion planning. Defaults to False. ignore_joint_limit ( bool , optional ) – Whether to ignore joint limits during motion planning. Defaults to False. planner ( str , optional ) – The name of the motion planning algorithm to use. Supported planners: ‘PRM’, ‘RRT’, ‘RRTConnect’, ‘RRTstar’, ‘EST’, ‘FMT’, ‘BITstar’, ‘ABITstar’. Defaults to ‘RRTConnect’. Returns : waypoints – A list of waypoints representing the planned path. Each waypoint is an array storing the entity’s qpos of a single time step. Return type : list get_joint ( name = None , id = None ) [source] # Get a RigidJoint object by name or id. Parameters : name ( str , optional ) – The name of the joint. Defaults to None. id ( str , optional ) – The id of the joint. This can be a substring of the joint’s id. Defaults to None. Returns : joint – The joint object. Return type : RigidJoint get_link ( name = None , id = None ) [source] # Get a RigidLink object by name or id. Parameters : name ( str , optional ) – The name of the link. Defaults to None. id ( str , optional ) – The id of the link. This can be a substring of the link’s id. Defaults to None. Returns : link – The link object. Return type : RigidLink get_pos ( envs_idx = None ) [source] # Returns position of the entity’s base link. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : pos – The position of the entity’s base link. Return type : torch.Tensor, shape (3,) or (n_envs, 3) get_quat ( envs_idx = None ) [source] # Returns quaternion of the entity’s base link. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : quat – The quaternion of the entity’s base link. Return type : torch.Tensor, shape (4,) or (n_envs, 4) get_vel ( envs_idx = None ) [source] # Returns linear velocity of the entity’s base link. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : vel – The linear velocity of the entity’s base link. Return type : torch.Tensor, shape (3,) or (n_envs, 3) get_ang ( envs_idx = None ) [source] # Returns angular velocity of the entity’s base link. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : ang – The angular velocity of the entity’s base link. Return type : torch.Tensor, shape (3,) or (n_envs, 3) get_links_pos ( envs_idx = None ) [source] # Returns position of all the entity’s links. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : pos – The position of all the entity’s links. Return type : torch.Tensor, shape (n_links, 3) or (n_envs, n_links, 3) get_links_quat ( envs_idx = None ) [source] # Returns quaternion of all the entity’s links. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : quat – The quaternion of all the entity’s links. Return type : torch.Tensor, shape (n_links, 4) or (n_envs, n_links, 4) get_links_vel ( envs_idx = None ) [source] # Returns linear velocity of all the entity’s links. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : vel – The linear velocity of all the entity’s links. Return type : torch.Tensor, shape (n_links, 3) or (n_envs, n_links, 3) get_links_ang ( envs_idx = None ) [source] # Returns angular velocity of all the entity’s links. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : ang – The angular velocity of all the entity’s links. Return type : torch.Tensor, shape (n_links, 3) or (n_envs, n_links, 3) set_pos ( pos , zero_velocity = True , envs_idx = None ) [source] # Set position of the entity’s base link. Parameters : pos ( array_like ) – The position to set. zero_velocity ( bool , optional ) – Whether to zero the velocity of all the entity’s dofs. Defaults to True. This is a safety measure after a sudden change in entity pose. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. set_quat ( quat , zero_velocity = True , envs_idx = None ) [source] # Set quaternion of the entity’s base link. Parameters : quat ( array_like ) – The quaternion to set. zero_velocity ( bool , optional ) – Whether to zero the velocity of all the entity’s dofs. Defaults to True. This is a safety measure after a sudden change in entity pose. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. get_verts ( ) [source] # Get the all vertices of the entity (using collision geoms). Returns : verts – The vertices of the entity (using collision geoms). Return type : torch.Tensor, shape (n_verts, 3) or (n_envs, n_verts, 3) get_AABB ( ) [source] # Get the axis-aligned bounding box (AABB) of the entity (using collision geoms). Returns : AABB – The axis-aligned bounding box (AABB) of the entity (using collision geoms). Return type : torch.Tensor, shape (2, 3) or (n_envs, 2, 3) set_qpos ( qpos , qs_idx_local = None , zero_velocity = True , envs_idx = None ) [source] # Set the entity’s qpos. Parameters : qpos ( array_like ) – The qpos to set. qs_idx_local ( None | array_like , optional ) – The indices of the qpos to set. If None, all qpos will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. zero_velocity ( bool , optional ) – Whether to zero the velocity of all the entity’s dofs. Defaults to True. This is a safety measure after a sudden change in entity pose. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. set_dofs_kp ( kp , dofs_idx_local = None ) [source] # Set the entity’s dofs’ positional gains for the PD controller. Parameters : kp ( array_like ) – The positional gains to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to set. If None, all dofs will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. set_dofs_kv ( kv , dofs_idx_local = None ) [source] # Set the entity’s dofs’ velocity gains for the PD controller. Parameters : kv ( array_like ) – The velocity gains to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to set. If None, all dofs will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. set_dofs_force_range ( lower , upper , dofs_idx_local = None ) [source] # Set the entity’s dofs’ force range. Parameters : lower ( array_like ) – The lower bounds of the force range. upper ( array_like ) – The upper bounds of the force range. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to set. If None, all dofs will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. set_dofs_velocity ( velocity , dofs_idx_local = None , envs_idx = None ) [source] # Set the entity’s dofs’ velocity. Parameters : velocity ( array_like ) – The velocity to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to set. If None, all dofs will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. set_dofs_position ( position , dofs_idx_local = None , zero_velocity = True , envs_idx = None ) [source] # Set the entity’s dofs’ position. Parameters : position ( array_like ) – The position to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to set. If None, all dofs will be set. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. zero_velocity ( bool , optional ) – Whether to zero the velocity of all the entity’s dofs. Defaults to True. This is a safety measure after a sudden change in entity pose. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. control_dofs_force ( force , dofs_idx_local = None , envs_idx = None ) [source] # Control the entity’s dofs’ motor force. This is used for force/torque control. Parameters : force ( array_like ) – The force to apply. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to control. If None, all dofs will be controlled. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. control_dofs_velocity ( velocity , dofs_idx_local = None , envs_idx = None ) [source] # Set the PD controller’s target velocity for the entity’s dofs. This is used for velocity control. Parameters : velocity ( array_like ) – The target velocity to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to control. If None, all dofs will be controlled. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. control_dofs_position ( position , dofs_idx_local = None , envs_idx = None ) [source] # Set the PD controller’s target position for the entity’s dofs. This is used for position control. Parameters : position ( array_like ) – The target position to set. dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to control. If None, all dofs will be controlled. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. get_qpos ( qs_idx_local = None , envs_idx = None ) [source] # Get the entity’s qpos. Parameters : qs_idx_local ( None | array_like , optional ) – The indices of the qpos to get. If None, all qpos will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : qpos – The entity’s qpos. Return type : torch.Tensor, shape (n_qs,) or (n_envs, n_qs) get_dofs_control_force ( dofs_idx_local = None , envs_idx = None ) [source] # Get the entity’s dofs’ internal control force, computed based on the position/velocity control command. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : control_force – The entity’s dofs’ internal control force. Return type : torch.Tensor, shape (n_dofs,) or (n_envs, n_dofs) get_dofs_force ( dofs_idx_local = None , envs_idx = None ) [source] # Get the entity’s dofs’ internal force at the current time step. Note Different from get_dofs_control_force , this function returns the actual internal force experienced by all the dofs at the current time step. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : force – The entity’s dofs’ force. Return type : torch.Tensor, shape (n_dofs,) or (n_envs, n_dofs) get_dofs_velocity ( dofs_idx_local = None , envs_idx = None ) [source] # Get the entity’s dofs’ velocity. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : velocity – The entity’s dofs’ velocity. Return type : torch.Tensor, shape (n_dofs,) or (n_envs, n_dofs) get_dofs_position ( dofs_idx_local = None , envs_idx = None ) [source] # Get the entity’s dofs’ position. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. Returns : position – The entity’s dofs’ position. Return type : torch.Tensor, shape (n_dofs,) or (n_envs, n_dofs) get_dofs_kp ( dofs_idx_local = None ) [source] # Get the positional gain (kp) for the entity’s dofs used by the PD controller. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. Returns : kp – The positional gain (kp) for the entity’s dofs. Return type : torch.Tensor, shape (n_dofs,) get_dofs_kv ( dofs_idx_local = None ) [source] # Get the velocity gain (kv) for the entity’s dofs used by the PD controller. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. Returns : kv – The velocity gain (kv) for the entity’s dofs. Return type : torch.Tensor, shape (n_dofs,) get_dofs_force_range ( dofs_idx_local = None ) [source] # Get the force range (min and max limits) for the entity’s dofs. Parameters : dofs_idx_local ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. Returns : lower_limit ( torch.Tensor, shape (n_dofs,) ) – The lower limit of the force range for the entity’s dofs. upper_limit ( torch.Tensor, shape (n_dofs,) ) – The upper limit of the force range for the entity’s dofs. get_dofs_limit ( dofs_idx = None ) [source] # Get the positional limits (min and max) for the entity’s dofs. Parameters : dofs_idx ( None | array_like , optional ) – The indices of the dofs to get. If None, all dofs will be returned. Note that here this uses the local q_idx , not the scene-level one. Defaults to None. Returns : lower_limit ( torch.Tensor, shape (n_dofs,) ) – The lower limit of the positional limits for the entity’s dofs. upper_limit ( torch.Tensor, shape (n_dofs,) ) – The upper limit of the positional limits for the entity’s dofs. zero_all_dofs_velocity ( envs_idx = None ) [source] # Zero the velocity of all the entity’s dofs. Parameters : envs_idx ( None | array_like , optional ) – The indices of the environments. If None, all environments will be considered. Defaults to None. detect_collision ( env_idx = 0 ) [source] # Detects collision for the entity. This only supports a single environment. Note This function re-detects real-time collision for the entity, so it doesn’t rely on scene.step() and can be used for applications like motion planning, which doesn’t require physical simulation during state sampling. Parameters : env_idx ( int , optional ) – The index of the environment. Defaults to 0. get_contacts ( with_entity = None ) [source] # Returns contact information computed during the most recent scene.step() . If with_entity is provided, only returns contact information involving the caller entity and the specified with_entity . Otherwise, returns all contact information involving the caller entity. The returned dict contains the following keys (a contact pair consists of two geoms: A and B): ‘geom_a’ : The global geom index of geom A in the contact pair. (actual geom object can be obtained by scene.rigid_solver.geoms[geom_a]) ‘geom_b’ : The global geom index of geom B in the contact pair. (actual geom object can be obtained by scene.rigid_solver.geoms[geom_b]) ‘link_a’ : The global link index of link A (that contains geom A) in the contact pair. (actual link object can be obtained by scene.rigid_solver.links[link_a]) ‘link_b’ : The global link index of link B (that contains geom B) in the contact pair. (actual link object can be obtained by scene.rigid_solver.links[link_b]) ‘position’ : The contact position in world frame. ‘force_a’ : The contact force applied to geom A. ‘force_b’ : The contact force applied to geom B. ‘valid_mask’ : (Only when scene is parallelized) A boolean mask indicating whether the contact information is valid. The shape of each entry is (n_envs, n_contacts, …) for scene with parallel envs, and (n_contacts, …) for non-parallelized scene. Parameters : with_entity ( RigidEntity , optional ) – The entity to check contact with. Defaults to None. Returns : contact_info – The contact information. Return type : dict get_links_net_contact_force ( ) [source] # Returns net force applied on each links due to direct external contacts. Returns : entity_links_force – The net force applied on each links due to direct external contacts. Return type : torch.Tensor, shape (n_links, 3) or (n_envs, n_links, 3) set_friction_ratio ( friction_ratio , link_indices , envs_idx = None ) [source] # Set the friction ratio of the geoms of the specified links. :param friction_ratio: The friction ratio :type friction_ratio: torch.Tensor, shape (n_envs, n_links) :param link_indices: The indices of the links to set friction ratio. :type link_indices: array_like :param envs_idx: The indices of the environments. If None, all environments will be considered. Defaults to None. :type envs_idx: None | array_like, optional set_friction ( friction ) [source] # Set the friction coefficient of all the links (and in turn, geoms) of the rigid entity. Note that for a pair of geoms in contact, the actual friction coefficient is set to be max(geom_a.friction, geom_b.friction), so you need to set for both geoms. Note In actual simulation, friction will be computed using max(max(ga_info.friction, gb_info.friction), 1e-2) ; i.e. the minimum friction coefficient is 1e-2. Parameters : friction ( float ) – The friction coefficient to set. get_mass ( ) [source] # Get the total mass of the entity in kg. Returns : mass – The total mass of the entity in kg. Return type : float property visualize_contact # Whether to visualize contact force. property init_qpos # The initial qpos of the entity. property n_qs # The number of q (generalized coordinates) of the entity. property n_links # The number of RigidLink in the entity. property n_joints # The number of RigidJoint in the entity. property n_dofs # The number of degrees of freedom (DOFs) of the entity. property n_geoms # The number of RigidGeom in the entity. property n_cells # The number of sdf cells in the entity. property n_verts # The number of vertices (from collision geom RigidGeom ) in the entity. property n_faces # The number of faces (from collision geom RigidGeom ) in the entity. property n_edges # The number of edges (from collision geom RigidGeom ) in the entity. property n_vgeoms # The number of vgeoms (visual geoms - RigidVisGeom ) in the entity. property n_vverts # The number of vverts (visual vertices, from vgeoms) in the entity. property n_vfaces # The number of vfaces (visual faces, from vgeoms) in the entity. property geom_start # The index of the entity’s first RigidGeom in the scene. property geom_end # The index of the entity’s last RigidGeom in the scene plus one . property cell_start # The start index the entity’s sdf cells in the scene. property cell_end # The end index the entity’s sdf cells in the scene plus one . property base_link_idx # The index of the entity’s base link in the scene. property link_start # The index of the entity’s first RigidLink in the scene. property link_end # The index of the entity’s last RigidLink in the scene plus one . property dof_start # The index of the entity’s first degree of freedom (DOF) in the scene. property gravity_compensation # Apply a force to compensate gravity. A value of 1 will make a zero-gravity behavior. Default to 0 property dof_end # The index of the entity’s last degree of freedom (DOF) in the scene plus one . property vert_start # The index of the entity’s first vert (collision vertex) in the scene. property vvert_start # The index of the entity’s first vvert (visual vertex) in the scene. property face_start # The index of the entity’s first face (collision face) in the scene. property vface_start # The index of the entity’s first vface (visual face) in the scene. property edge_start # The index of the entity’s first edge (collision edge) in the scene. property q_start # The index of the entity’s first q (generalized coordinates) in the scene. property q_end # The index of the entity’s last q (generalized coordinates) in the scene plus one . property geoms # The list of collision geoms ( RigidGeom ) in the entity. property vgeoms # The list of visual geoms ( RigidVisGeom ) in the entity. property links # The list of links ( RigidLink ) in the entity. property joints # The list of joints ( RigidJoint ) in the entity. property base_link # The base link of the entity property base_joint # The base joint of the entity
gs.RigidGeom # class genesis.engine.entities.rigid_entity.rigid_geom. RigidGeom ( link , idx , cell_start , vert_start , face_start , edge_start , mesh , type , friction , sol_params , init_pos , init_quat , needs_coup , center_init = None , data = None ) [source] # Bases: RBC A RigidGeom is the basic building block of a RigidEntity for collision checking. It is usually constructed from a single mesh. This can be accessed via link.geoms . get_trimesh ( ) [source] # Get the geom’s trimesh object. get_sdf_trimesh ( color = [1.0, 1.0, 0.6, 1.0] ) [source] # Reconstruct trimesh object from sdf. visualize_sdf ( pos = None , T = None , color = (1.0, 1.0, 0.3, 1.0) , show_axis = False , axis_color = (1.0, 0.0, 0.0, 1.0) , axis_length = 0.3 , show_boundary = False , boundary_color = (0.0, 1.0, 0.0, 0.2) ) [source] # Visualizes the signed distance field (SDF) of the rigid geometry in the viewer. sdf_grad_world ( pos_world , recompute = False ) [source] # sdf grad wrt world frame coordinate. sdf_grad_mesh ( pos_mesh , recompute = False ) [source] # sdf grad wrt mesh frame coordinate. sdf_grad_sdf ( pos_sdf ) [source] # sdf grad wrt sdf frame coordinate. sdf_world ( pos_world , recompute = False ) [source] # sdf value from world coordinate sdf_mesh ( pos_mesh , recompute = False ) [source] # sdf value from mesh coordinate sdf_sdf ( pos_sdf ) [source] # sdf value wrt sdf frame coordinate. Note that the stored sdf magnitude is already w.r.t world frame. set_friction ( friction ) [source] # Set the friction coefficient of the geom. get_pos ( ) [source] # Get the position of the geom in world frame. get_quat ( ) [source] # Get the quaternion of the geom in world frame. get_verts ( ) [source] # Get the vertices of the geom in world frame. get_AABB ( ) [source] # Get the axis-aligned bounding box (AABB) of the geom in world frame. property uid # Get the unique ID of the geom. property idx # Get the global index of the geom in RigidSolver. property type # Get the type of the geom. property friction # Get the friction coefficient of the geom. property sol_params # Get the solver parameters of the geom. property data # Get the additional data of the geom. property metadata # Get the metadata of the geom. property link # Get the link that the geom belongs to. property entity # Get the entity that the geom belongs to. property solver # Get the solver that the geom belongs to.s property is_convex # Get whether the geom is convex. property mesh # property needs_coup # Get whether the geom needs coupling with other non-rigid entities. property coup_softness # Get the softness coefficient of the geom for coupling. property coup_friction # Get the friction coefficient of the geom for coupling. property coup_restitution # Get the restitution coefficient of the geom for coupling. property init_pos # Get the initial position of the geom. property init_quat # Get the initial quaternion of the geom. property init_verts # Get the initial vertices of the geom. property init_faces # Get the initial faces of the geom. property init_edges # Get the initial edges of the geom. property init_normals # Get the initial normals of the geom. property init_center_pos # Get the initial center position of the geom. property uvs # Get the UV coordinates of the geom. property surface # Get the surface object of the geom. property gsd_path # Get the path to the preprocessed .gsd file. property sdf_res # Get the resolution of the geom’s signed distance field (SDF). property sdf_val # Get the signed distance field (SDF) of the geom. property sdf_val_flattened # Get the flattened signed distance field (SDF) of the geom. property sdf_grad # Get the gradient of the geom’s signed distance field (SDF). property sdf_grad_flattened # Get the flattened gradient of the geom’s signed distance field (SDF). property sdf_max # Get the maximum value of the geom’s signed distance field (SDF). property sdf_cell_size # Get the cell size of the geom’s signed distance field (SDF). property sdf_grad_delta # Get the delta value for computing the gradient of the geom’s signed distance field (SDF). property sdf_closest_vert # Get the closest vertex of each cell of the geom’s signed distance field (SDF). property sdf_closest_vert_flattened # Get the flattened closest vertex of each cell of the geom’s signed distance field (SDF). property T_mesh_to_sdf # Get the transformation matrix of the geom’s mesh frame w.r.t its signed distance field (SDF) frame. property n_cells # Number of cells in the geom’s signed distance field (SDF). property n_verts # Number of vertices of the geom. property n_faces # Number of faces of the geom. property n_edges # Number of edges of the geom. property cell_start # Get the starting index of the cells of the signed distance field (SDF) in the rigid solver. property vert_start # Get the starting index of the geom’s vertices in the rigid solver. property face_start # Get the starting index of the geom’s faces in the rigid solver. property edge_start # Get the starting index of the geom’s edges in the rigid solver. property cell_end # Get the ending index of the cells of the signed distance field (SDF) in the rigid solver. property vert_end # Get the ending index of the geom’s vertices in the rigid solver. property face_end # Get the ending index of the geom’s faces in the rigid solver. property edge_end # Get the ending index of the geom’s edges in the rigid solver. property is_built # Whether the rigid entity the geom belongs to is built.
gs.RigidJoint # class genesis.engine.entities.rigid_entity.rigid_joint. RigidJoint ( entity , name , idx , q_start , dof_start , n_qs , n_dofs , type , pos , quat , dofs_motion_ang , dofs_motion_vel , dofs_limit , dofs_invweight , dofs_stiffness , dofs_sol_params , dofs_damping , dofs_armature , dofs_kp , dofs_kv , dofs_force_range , init_qpos ) [source] # Bases: RBC Joint class for rigid body entities. Each RigidLink is connected to its parent link via a RigidJoint. get_pos ( ) [source] # Get the position of the joint in the world frame. get_quat ( ) [source] # Get the quaternion of the joint in the world frame. property uid # Returns the unique id of the joint. property name # Returns the name of the joint. property entity # Returns the entity that the joint belongs to. property solver # The RigidSolver object that the joint belongs to. property link # Returns the child link that of the joint. property idx # Returns the global index of the joint in the rigid solver. property idx_local # Returns the local index of the joint in the entity. property init_qpos # Returns the initial joint position. property n_qs # Returns the number of q (generalized coordinate) variables that the joint has. property n_dofs # Returns the number of dofs that the joint has. property type # Returns the type of the joint. property pos # Returns the initial position of the joint in the world frame. property quat # Returns the initial quaternion of the joint in the world frame. property q_start # Returns the starting index of the q variables of the joint in the rigid solver. property dof_start # Returns the starting index of the dofs of the joint in the rigid solver. property q_end # Returns the ending index of the q variables of the joint in the rigid solver. property dof_end # Returns the ending index of the dofs of the joint in the rigid solver. property dof_idx # Returns all the dof indices of the joint in the rigid solver. property dof_idx_local # Returns the local dof index of the joint in the entity. property q_idx # Returns all the q indices of the joint in the rigid solver. property q_idx_local # Returns all the local q indices of the joint in the entity. property dofs_motion_ang # property dofs_motion_vel # property dofs_limit # Returns the range limit of the dofs of the joint. property dofs_invweight # Returns the invweight of the dofs of the joint. property dofs_stiffness # Returns the stiffness of the dofs of the joint. property dofs_sol_params # Retruns the solver parameters of the dofs of the joint. property dofs_damping # Returns the damping of the dofs of the joint. property dofs_armature # Returns the armature of the dofs of the joint. property dofs_kp # Returns the kp (positional gain) of the dofs of the joint. property dofs_kv # Returns the kv (velocity gain) of the dofs of the joint. property dofs_force_range # Returns the force range of the dofs of the joint. property is_built # Returns whether the entity the joint belongs to is built.
gs.RigidLink # class genesis.engine.entities.rigid_entity.rigid_link. RigidLink ( entity , name , idx , geom_start , cell_start , vert_start , face_start , edge_start , vgeom_start , vvert_start , vface_start , pos , quat , inertial_pos , inertial_quat , inertial_i , inertial_mass , parent_idx , invweight , visualize_contact ) [source] # Bases: RBC RigidLink class. One RigidEntity consists of multiple RigidLinks, each of which is a rigid body and could consist of multiple RigidGeoms ( link.geoms , for collision) and RigidVisGeoms ( link.vgeoms for visualization). get_pos ( envs_idx = None ) [source] # Get the position of the link in the world frame. Parameters : envs_idx ( int or array of int , optional ) – The indices of the environments to get the position. If None, get the position of all environments. Default is None. get_quat ( envs_idx = None ) [source] # Get the quaternion of the link in the world frame. Parameters : envs_idx ( int or array of int , optional ) – The indices of the environments to get the quaternion. If None, get the quaternion of all environments. Default is None. get_vel ( envs_idx = None ) [source] # Get the linear velocity of the link in the world frame. Parameters : envs_idx ( int or array of int , optional ) – The indices of the environments to get the linear velocity. If None, get the linear velocity of all environments. Default is None. get_ang ( envs_idx = None ) [source] # Get the angular velocity of the link in the world frame. Parameters : envs_idx ( int or array of int , optional ) – The indices of the environments to get the angular velocity. If None, get the angular velocity of all environments. Default is None. get_verts ( ) [source] # Get the vertices of the link’s collision body (concatenation of all link.geoms ) in the world frame. get_vverts ( ) [source] # Get the vertices of the link’s visualization body (concatenation of all link.vgeoms ) in the world frame. get_AABB ( ) [source] # Get the axis-aligned bounding box (AABB) of the link’s collision body (concatenation of all link.geoms ) in the world frame. get_vAABB ( ) [source] # Get the axis-aligned bounding box (AABB) of the link’s visual body (concatenation of all link.vgeoms ) in the world frame. set_mass ( mass ) [source] # Set the mass of the link. get_mass ( ) [source] # Get the mass of the link. set_friction ( friction ) [source] # Set the friction of all the link’s geoms. property uid # The unique ID of the link. property name # The name of the link. property entity # The entity that the link belongs to. property solver # The solver that the link belongs to. property visualize_contact # Whether to visualize the contact of the link. property joint # The joint that connects the link to its parent link. property idx # The global index of the link in the RigidSolver. property parent_idx # The global index of the link’s parent link in the RigidSolver. If the link is the root link, return -1. property child_idxs # The global indices of the link’s child links in the RigidSolver. property idx_local # The local index of the link in the entity. property parent_idx_local # The local index of the link’s parent link in the entity. If the link is the root link, return -1. property child_idxs_local # The local indices of the link’s child links in the entity. property is_leaf # Whether the link is a leaf link (i.e., has no child links). property invweight # The invweight of the link. property pos # The initial position of the link. For real-time position, use link.get_pos() . property quat # The initial quaternion of the link. For real-time quaternion, use link.get_quat() . property inertial_pos # The initial position of the link’s inertial frame. property inertial_quat # The initial quaternion of the link’s inertial frame. property inertial_mass # The initial mass of the link. property inertial_i # The inerial matrix of the link. property geoms # The list of the link’s collision geometries ( RigidGeom ). property vgeoms # The list of the link’s visualization geometries ( RigidVisGeom ). property n_geoms # Number of the link’s collision geometries. property geom_start # The start index of the link’s collision geometries in the RigidSolver. property geom_end # The end index of the link’s collision geometries in the RigidSolver. property n_vgeoms # Number of the link’s visualization geometries ( vgeom ). property vgeom_start # The start index of the link’s vgeom in the RigidSolver. property vgeom_end # The end index of the link’s vgeom in the RigidSolver. property n_cells # Number of sdf cells of all the link’s geoms. property n_verts # Number of vertices of all the link’s geoms. property n_vverts # Number of vertices of all the link’s vgeoms. property n_faces # Number of faces of all the link’s geoms. property n_vfaces # Number of faces of all the link’s vgeoms. property n_edges # Number of edges of all the link’s geoms. property is_built # Whether the entity the link belongs to is built.
gs.RigidVisGeom # class genesis.engine.entities.rigid_entity.rigid_geom. RigidVisGeom ( link , idx , vvert_start , vface_start , vmesh , init_pos , init_quat ) [source] # Bases: RBC A RigidVisGeom is a counterpart of RigidGeom , but for visualization purposes. This can be accessed via link.vis_geoms . get_trimesh ( ) [source] # Get trimesh object. property uid # Get the unique ID of the vgeom. property idx # Get the global index of the vgeom in RigidSolver. property link # Get the link that the vgeom belongs to. property entity # Get the entity that the vgeom belongs to. property vmesh # property solver # Get the solver that the vgeom belongs to. property metadata # Get the metadata of the vgeom. property init_pos # Get the initial position of the vgeom. property init_quat # Get the initial quaternion of the vgeom. property init_vverts # Get the initial vertices of the vgeom. property init_vfaces # Get the initial faces of the vgeom. property init_vnormals # Get the initial normals of the vgeom. property uvs # Get the UV coordinates of the vgeom. property surface # Get the surface object of the vgeom. property n_vverts # Number of vertices of the vgeom. property n_vfaces # Number of faces of the vgeom. property vvert_start # Get the starting index of the vgeom’s vertices in the rigid solver. property vface_start # Get the starting index of the vgeom’s faces in the rigid solver. property vvert_end # Get the ending index of the vgeom’s vertices in the rigid solver. property vface_end # Get the ending index of the vgeom’s faces in the rigid solver. property is_built # Whether the rigid entity the vgeom belongs to is built.
gs.surfaces.Rough # class genesis.options.surfaces. Rough ( * , color : tuple | None = None , opacity : float | None = None , roughness : float = 1.0 , metallic : float | None = None , emissive : tuple | None = None , ior : float = 1.5 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_texture : Texture | None = None ) [source] # Bases: Plastic Shortcut for a rough plastic surface.
Scene # class genesis.engine.scene. Scene ( * args , ** kwargs ) [source] # A genesis.Scene object wraps all components in a simulation environment, including a simulator (containing multiple physics solvers), entities, and a visualizer (controlling both the viewer and all the cameras). Basically, everything happens inside a scene. Parameters : sim_options ( gs.options.SimOptions ) – The options configuring the overarching simulator , which in turn manages all the solvers. coupler_options ( gs.options.CouplerOptions ) – The options configuring the coupler between different solvers. tool_options ( gs.options.ToolOptions ) – The options configuring the tool_solver ( scene.sim.ToolSolver ). rigid_options ( gs.options.RigidOptions ) – The options configuring the rigid_solver ( scene.sim.RigidSolver ). avatar_options ( gs.options.AvatarOptions ) – The options configuring the avatar_solver ( scene.sim.AvatarSolver ). mpm_options ( gs.options.MPMOptions ) – The options configuring the mpm_solver ( scene.sim.MPMSolver ). sph_options ( gs.options.SPHOptions ) – The options configuring the sph_solver ( scene.sim.SPHSolver ). fem_options ( gs.options.FEMOptions ) – The options configuring the fem_solver ( scene.sim.FEMSolver ). sf_options ( gs.options.SFOptions ) – The options configuring the sf_solver ( scene.sim.SFSolver ). pbd_options ( gs.options.PBDOptions ) – The options configuring the pbd_solver ( scene.sim.PBDSolver ). vis_options ( gs.options.VisOptions ) – The options configuring the visualization system ( scene.visualizer ). Visualizer controls both the interactive viewer and the cameras. viewer_options ( gs.options.ViewerOptions ) – The options configuring the viewer ( scene.visualizer.viewer ). renderer ( gs.renderers.Renderer ) – The renderer used by camera for rendering images. This doesn’t affect the behavior of the interactive viewer. show_viewer ( bool ) – Whether to show the interactive viewer. Set it to False if you only need headless rendering. show_FPS ( bool ) – Whether to show the FPS in the terminal. add_entity ( morph , material = None , surface = None , visualize_contact = False , vis_mode = None ) [source] # Add an entity to the scene. Parameters : morph ( gs.morphs.Morph ) – The morph of the entity. material ( gs.materials.Material | None , optional ) – The material of the entity. If None, use gs.materials.Rigid() . surface ( gs.surfaces.Surface | None , optional ) – The surface of the entity. If None, use gs.surfaces.Default() . visualize_contact ( bool ) – Whether to visualize contact forces applied to this entity as arrows in the viewer and rendered images. Note that this will not be displayed in images rendered by camera using the RayTracer renderer. vis_mode ( str | None , optional ) – The visualization mode of the entity. This is a handy shortcut for setting surface.vis_mode without explicitly creating a surface object. Returns : entity – The created entity. Return type : genesis.Entity add_light ( morph , color = (1.0, 1.0, 1.0, 1.0) , intensity = 20.0 , revert_dir = False , double_sided = False , beam_angle = 180.0 ) [source] # Add a light to the scene. Note that lights added this way can be instantiated from morphs (supporting gs.morphs.Primitive or gs.morphs.Mesh ), and will only be used by the RayTracer renderer. Parameters : morph ( gs.morphs.Morph ) – The morph of the light. Must be an instance of gs.morphs.Primitive or gs.morphs.Mesh . color ( tuple of float , shape ( 3 , ) ) – The color of the light, specified as (r, g, b). intensity ( float ) – The intensity of the light. revert_dir ( bool ) – Whether to revert the direction of the light. If True, the light will be emitted towards the mesh’s inside. double_sided ( bool ) – Whether to emit light from both sides of surface. beam_angle ( float ) – The beam angle of the light. add_camera ( model = 'pinhole' , res = (320, 320) , pos = (0.5, 2.5, 3.5) , lookat = (0.5, 0.5, 0.5) , up = (0.0, 0.0, 1.0) , fov = 30 , aperture = 2.0 , focus_dist = None , GUI = False , spp = 256 , denoise = True ) [source] # Add a camera to the scene. The camera model can be either ‘pinhole’ or ‘thinlens’. The ‘pinhole’ model is a simple camera model that captures light rays from a single point in space. The ‘thinlens’ model is a more complex camera model that simulates a lens with a finite aperture size, allowing for depth of field effects. When ‘pinhole’ is used, the aperture and focal_len parameters are ignored. Parameters : model ( str ) – Specifies the camera model. Options are ‘pinhole’ or ‘thinlens’. res ( tuple of int , shape ( 2 , ) ) – The resolution of the camera, specified as a tuple (width, height). pos ( tuple of float , shape ( 3 , ) ) – The position of the camera in the scene, specified as (x, y, z). lookat ( tuple of float , shape ( 3 , ) ) – The point in the scene that the camera is looking at, specified as (x, y, z). up ( tuple of float , shape ( 3 , ) ) – The up vector of the camera, defining its orientation, specified as (x, y, z). fov ( float ) – The vertical field of view of the camera in degrees. aperture ( float ) – The aperture size of the camera, controlling depth of field. focus_dist ( float | None ) – The focus distance of the camera. If None, it will be auto-computed using pos and lookat . GUI ( bool ) – Whether to display the camera’s rendered image in a separate GUI window. spp ( int , optional ) – Samples per pixel. Defaults to 256. denoise ( bool ) – Whether to denoise the camera’s rendered image. Returns : camera – The created camera object. Return type : genesis.Camera add_emitter ( material , max_particles = 20000 , surface = None ) [source] # Add a fluid emitter to the scene. Parameters : material ( gs.materials.Material ) – The material of the fluid to be emitted. Must be an instance of gs.materials.MPM.Base or gs.materials.SPH.Base . max_particles ( int ) – The maximum number of particles that can be emitted by the emitter. Particles will be recycled once this limit is reached. surface ( gs.surfaces.Surface | None , optional ) – The surface of the emitter. If None, use gs.surfaces.Default(color=(0.6, 0.8, 1.0, 1.0)) . Returns : emitter – The created emitter object. Return type : genesis.Emitter add_force_field ( force_field : ForceField ) [source] # Add a force field to the scene. Parameters : force_field ( gs.force_fields.ForceField ) – The force field to add to the scene. Returns : force_field – The added force field. Return type : gs.force_fields.ForceField build ( n_envs = 0 , env_spacing = (0.0, 0.0) , n_envs_per_row = None , center_envs_at_origin = True , compile_kernels = True ) [source] # Builds the scene once all entities have been added. This operation is required before running the simulation. Parameters : n_envs ( int ) – Number of parallel environments to create. If n_envs is 0, the scene will not have a batching dimension. If n_envs is greater than 0, the first dimension of all the input and returned states will be the batch dimension. env_spacing ( tuple of float , shape ( 2 , ) ) – The spacing between adjacent environments in the scene. This is for visualization purposes only and does not change simulation-related poses. n_envs_per_row ( int ) – The number of environments per row for visualization. If None, it will be set to sqrt(n_envs) . center_envs_at_origin ( bool ) – Whether to put the center of all the environments at the origin (for visualization only). compile_kernels ( bool ) – Whether to compile the simulation kernels inside build() . If False, the kernels will not be compiled (or loaded if found in the cache) until the first call of scene.step() . This is useful for cases you don’t want to run the actual simulation, but rather just want to visualize the created scene. reset ( state = None ) [source] # Resets the scene to its initial state. Parameters : state ( dict | None ) – The state to reset the scene to. If None, the scene will be reset to its initial state. If this is given, the scene’s registerered initial state will be updated to this state. get_state ( ) [source] # Returns the current state of the scene. Returns : state – The state of the scene at the current time step. Return type : genesis.SimState step ( update_visualizer = True ) [source] # Runs a simulation step forward in time. draw_debug_line ( start , end , radius = 0.002 , color = (1.0, 0.0, 0.0, 0.5) ) [source] # Draws a line in the scene for visualization. Parameters : start ( array_like , shape ( 3 , ) ) – The starting point of the line. end ( array_like , shape ( 3 , ) ) – The ending point of the line. radius ( float , optional ) – The radius of the line (represented as a cylinder) color ( array_like , shape ( 4 , ) , optional ) – The color of the line in RGBA format. draw_debug_arrow ( pos , vec = (0, 0, 1) , radius = 0.01 , color = (1.0, 0.0, 0.0, 0.5) ) [source] # Draws an arrow in the scene for visualization. Parameters : pos ( array_like , shape ( 3 , ) ) – The starting position of the arrow. vec ( array_like , shape ( 3 , ) , optional ) – The vector of the arrow. radius ( float , optional ) – The radius of the arrow body (represented as a cylinder). color ( array_like , shape ( 4 , ) , optional ) – The color of the arrow in RGBA format. draw_debug_frame ( T , axis_length = 1.0 , origin_size = 0.015 , axis_radius = 0.01 ) [source] # Draws a 3-axis coordinate frame in the scene for visualization. Parameters : T ( array_like , shape ( 4 , 4 ) ) – The transformation matrix of the frame. axis_length ( float , optional ) – The length of the axes. origin_size ( float , optional ) – The size of the origin point (represented as a sphere). axis_radius ( float , optional ) – The radius of the axes (represented as cylinders). draw_debug_mesh ( mesh , pos = array([0., 0., 0.]) , T = None ) [source] # Draws a mesh in the scene for visualization. Parameters : mesh ( trimesh.Trimesh ) – The mesh to be drawn. pos ( array_like , shape ( 3 , ) , optional ) – The position of the mesh in the scene. T ( array_like , shape ( 4 , 4 ) | None , optional ) – The transformation matrix of the mesh. If None, the mesh will be drawn at the position specified by pos . Otherwise, T has a higher priority than pos . draw_debug_sphere ( pos , radius = 0.01 , color = (1.0, 0.0, 0.0, 0.5) ) [source] # Draws a sphere in the scene for visualization. Parameters : pos ( array_like , shape ( 3 , ) ) – The center position of the sphere. radius ( float , optional ) – radius of the sphere. color ( array_like , shape ( 4 , ) , optional ) – The color of the sphere in RGBA format. draw_debug_spheres ( poss , radius = 0.01 , color = (1.0, 0.0, 0.0, 0.5) ) [source] # Draws multiple spheres in the scene for visualization. Parameters : poss ( array_like , shape ( N , 3 ) ) – The positions of the spheres. radius ( float , optional ) – The radius of the spheres. color ( array_like , shape ( 4 , ) , optional ) – The color of the spheres in RGBA format. draw_debug_box ( bounds , color = (1.0, 0.0, 0.0, 1.0) , wireframe = True , wireframe_radius = 0.0015 ) [source] # Draws a box in the scene for visualization. Parameters : bounds ( array_like , shape ( 2 , 3 ) ) – The bounds of the box, specified as [[min_x, min_y, min_z], [max_x, max_y, max_z]]. color ( array_like , shape ( 4 , ) , optional ) – The color of the box in RGBA format. wireframe ( bool , optional ) – Whether to draw the box as a wireframe. wireframe_radius ( float , optional ) – The radius of the wireframe lines. draw_debug_points ( poss , colors = (1.0, 0.0, 0.0, 0.5) ) [source] # Draws points in the scene for visualization. Parameters : poss ( array_like , shape ( N , 3 ) ) – The positions of the points. colors ( array_like , shape ( 4 , ) , optional ) – The color of the points in RGBA format. clear_debug_objects ( ) [source] # Clears all the debug objects in the scene. property uid # The unique ID of the scene. property dt # The time duration for each simulation step. property t # The current simulation time step. property substeps # The number of substeps per simulation step. property requires_grad # Whether the scene is in differentiable mode. property is_built # Whether the scene has been built. property show_FPS # Whether to print the frames per second (FPS) in the terminal. property gravity # The gravity in the scene. property viewer # The viewer object for the scene. property visualizer # The visualizer object for the scene. property sim # The scene’s top-level simulator. property cur_t # The current simulation time. property solvers # All the solvers managed by the scene’s simulator. property active_solvers # All the active solvers managed by the scene’s simulator. property entities # All the entities in the scene. property emitters # All the emitters in the scene. property tool_solver # The scene’s tool_solver , managing all the ToolEntity in the scene. property rigid_solver # The scene’s rigid_solver , managing all the RigidEntity in the scene. property avatar_solver # The scene’s avatar_solver , managing all the AvatarEntity in the scene. property mpm_solver # The scene’s mpm_solver , managing all the MPMEntity in the scene. property sph_solver # The scene’s sph_solver , managing all the SPHEntity in the scene. property fem_solver # The scene’s fem_solver , managing all the FEMEntity in the scene. property pbd_solver # The scene’s pbd_solver , managing all the PBDEntity in the scene.
gs.options.SFOptions # class genesis.options.solvers. SFOptions ( * , dt : float | None = None ) [source] # Options configuring the SFSolver. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None.
gs.options.SimOptions # class genesis.options.solvers. SimOptions ( * , dt : float = 0.01 , substeps : int = 1 , substeps_local : int | None = None , gravity : tuple = (0.0, 0.0, -9.81) , floor_height : float = 0.0 , requires_grad : bool = False ) [source] # Options configuring the top-level simulator. Note SimOptions specifies the global settings for the simulator. Some parameters exist both in SimOptions and SolverOptions . In this case, if such parameters are given in SolverOptions , it will override the one specified in SimOptions for this specific solver. For example, if dt is only given in SimOptions , it will be shared by all the solvers, but it’s also possible to let a solver run at a different temporal speed by setting its own dt to be a different value. In differentiable mode, substeps_local must be divisible by substeps , as external command is input per step , but substep . If requires_grad is False, we can use arbitrary substeps_local . Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. Defaults to 1e-2. substeps ( int , optional ) – Number of substeps per simulation step. Defaults to 1. substeps_local ( int , optional ) – Number of substeps stored in GPU memory. Defaults to None. This is used for differentiable mode. gravity ( tuple , optional ) – Gravity force in N/kg. Defaults to (0.0, 0.0, -9.81). floor_height ( float , optional ) – Height of the floor in meters. Defaults to 0.0. requires_grad ( bool , optional ) – Whether to enable differentiable mode. Defaults to False.
Simulator # class genesis.engine.simulator. Simulator ( scene , options , coupler_options , tool_options , rigid_options , avatar_options , mpm_options , sph_options , fem_options , sf_options , pbd_options ) [source] # A simulator is a scene-level simulation manager, which manages all simulation-related operations in the scene, including multiple solvers and the inter-solver coupler. Parameters : scene ( gs.Scene ) – The scene object that the simulator is associated with. options ( gs.SimOptions ) – A SimOptions object that contains all simulator-level options. coupler_options ( gs.CouplerOptions ) – A CouplerOptions object that contains all the options for the coupler. tool_options ( gs.ToolOptions ) – A ToolOptions object that contains all the options for the ToolSolver. rigid_options ( gs.RigidOptions ) – A RigidOptions object that contains all the options for the RigidSolver. avatar_options ( gs.AvatarOptions ) – An AvatarOptions object that contains all the options for the AvatarSolver. mpm_options ( gs.MPMOptions ) – An MPMOptions object that contains all the options for the MPMSolver. sph_options ( gs.SPHOptions ) – An SPHOptions object that contains all the options for the SPHSolver. fem_options ( gs.FEMOptions ) – An FEMOptions object that contains all the options for the FEMSolver. sf_options ( gs.SFOptions ) – An SFOptions object that contains all the options for the SFSolver. pbd_options ( gs.PBDOptions ) – A PBDOptions object that contains all the options for the PBDSolver. build ( ) [source] # reset ( state ) [source] # reset_grad ( ) [source] # f_global_to_f_local ( f_global ) [source] # f_local_to_s_local ( f_local ) [source] # f_global_to_s_local ( f_global ) [source] # f_global_to_s_global ( f_global ) [source] # step ( in_backward = False ) [source] # process_input ( in_backward = False ) [source] # setting _tgt state using external commands note that external inputs are given at step level, not substep process_input_grad ( ) [source] # substep ( f ) [source] # sub_step_grad ( f ) [source] # substep_pre_coupling ( f ) [source] # substep_pre_coupling_grad ( f ) [source] # substep_post_coupling ( f ) [source] # substep_post_coupling_grad ( f ) [source] # add_grad_from_state ( state ) [source] # collect_output_grads ( ) [source] # Collect gradients from downstream queried states. save_ckpt ( ) [source] # This function refreshes the gpu memory (copy the last frame to the first frame in the local memory), and then saves the checkpoint. This function is called every substeps_local steps, which means it’s called only once per step when requires_grad is True. load_ckpt ( ) [source] # get_state ( ) [source] # property dt # The time duration for each simulation step. property substeps # The number of substeps per simulation step. property scene # The scene object that the simulator is associated with. property gravity # The gravity vector. property requires_grad # Whether the simulator requires gradients. property n_entities # The number of entities in the simulator. property entities # The list of entities in the simulator. property substeps_local # The number of substeps stored in local memory. property cur_substep_global # The current substep of the simulation. property cur_substep_local # The current substep of the simulation in local memory. property cur_step_local # The current step of the simulation in local memory. property cur_step_global # The current step of the simulation. property cur_t # The current time of the simulation. property coupler # The coupler object that manages the inter-solver coupling. property solvers # The list of solvers in the simulator. property active_solvers # The list of active solvers in the simulator.
gs.surfaces.Smooth # class genesis.options.surfaces. Smooth ( * , color : tuple | None = None , opacity : float | None = None , roughness : float = 0.1 , metallic : float | None = None , emissive : tuple | None = None , ior : float = 1.5 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , diffuse_texture : Texture | None = None , specular_texture : Texture | None = None ) [source] # Bases: Plastic Shortcut for a smooth plastic surface.
gs.options.SPHOptions # class genesis.options.solvers. SPHOptions ( * , dt : float | None = None , gravity : tuple | None = None , particle_size : float = 0.02 , pressure_solver : str = 'WCSPH' , lower_bound : tuple = (-100.0, -100.0, 0.0) , upper_bound : tuple = (100.0, 100.0, 100.0) , hash_grid_res : tuple | None = None , hash_grid_cell_size : float | None = None , max_divergence_error : float = 0.1 , max_density_error_percent : float = 0.05 , max_divergence_solver_iterations : int = 100 , max_density_solver_iterations : int = 100 ) [source] # Options configuring the SPHSolver. Note If spatial hashing parameters are not given, we will compute them automatically this way: For hash_grid_cell_size , we will set it to be the support_radius , which is essentially 2 * particle_size . For hash_grid_res , if a small bound is given, it’s used for the hash grid; otherwise, we use a default value of a 150^3 cube. Any grid bigger than that will results in too many cells hence not ideal. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. If none, it will inherit from SimOptions . Defaults to None. gravity ( tuple , optional ) – Gravity force in N/kg. If none, it will inherit from SimOptions . Defaults to None. particle_size ( float , optional ) – Particle diameter in meters. Defaults to 0.02. pressure_solver ( str , optional ) – Pressure solver type. Current supported pressure solvers are ‘WCSPH’ and ‘DFSPH’. Defaults to ‘WCSPH’. lower_bound ( tuple , shape ( 3 , ) , optional ) – Lower bound of the simulation domain. Defaults to (-100.0, -100.0, 0.0). upper_bound ( tuple , shape ( 3 , ) , optional ) – Upper bound of the simulation domain. Defaults to (100.0, 100.0, 100.0). hash_grid_res ( tuple , optional ) – Size of the spatially-repetitive spatial hashing grid in meters. If none, it will be computed automatically. Defaults to None. hash_grid_cell_size ( float , optional ) – Size of the lattic cell of the spatial hashing grid in meters. This should be at least 2 * particle_size . If none, it will be computed automatically. Defaults to None. max_divergence_error ( float , optional ) – Maximum divergence error for DFSPH. Defaults to 0.1. max_density_error_percent ( float , optional ) – Maximum density error percent for DFSPH, so 0.1 means 0.1%. Defaults to 0.05. max_divergence_solver_iterations ( int , optional ) – Maximum number of iterations for the divergence solver. Defaults to 100. max_density_solver_iterations ( int , optional ) – Maximum number of iterations for the density solver. Defaults to 100.
gs.morphs.Sphere # class genesis.options.morphs. Sphere ( * args , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , fixed : bool = False , radius : float = 0.5 ) [source] # Morph defined by a sphere shape. Parameters : pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. radius ( float , optional ) – The radius of the sphere in meters. Defaults to 0.5. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. This is only used for RigidEntity. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to False. This is only used for RigidEntity. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. This is only used for RigidEntity.
gs.surfaces.Surface # class genesis.options.surfaces. Surface ( * , color : tuple | None = None , opacity : float | None = None , roughness : float | None = None , metallic : float | None = None , emissive : tuple | None = None , ior : float | None = None , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None ) [source] # Base class for all surfaces types in Genesis. A Surface object encapsulates all visual information used for rendering an entity or its sub-components (links, geoms, etc.) The surface contains different types textures: diffuse_texture, specular_texture, roughness_texture, metallic_texture, transmission_texture, normal_texture, and emissive_texture. Each one of them is a gs.textures.Texture object. Tip If any of the textures only has single value (instead of a map), you can use the shortcut attribute (e.g., color , roughness , metallic , emissive ) instead of creating a texture object. Note This class should not be instantiated directly. Parameters : color ( tuple | None , optional ) – Diffuse color of the surface. Shortcut for diffuse_texture with a single color. opacity ( float | None , optional ) – Opacity of the surface. Shortcut for opacity_texture with a single value. roughness ( float | None , optional ) – Roughness of the surface. Shortcut for roughness_texture with a single value. metallic ( float | None , optional ) – Metallicness of the surface. Shortcut for metallic_texture with a single value. emissive ( tuple | None , optional ) – Emissive color of the surface. Shortcut for emissive_texture with a single color. ior ( float , optional ) – Index of Refraction. opacity_texture ( gs.textures.Texture | None , optional ) – Opacity texture of the surface. roughness_texture ( gs.textures.Texture | None , optional ) – Roughness texture of the surface. metallic_texture ( gs.textures.Texture | None , optional ) – Metallic texture of the surface. normal_texture ( gs.textures.Texture | None , optional ) – Normal texture of the surface. emissive_texture ( gs.textures.Texture | None , optional ) – Emissive texture of the surface. default_roughness ( float , optional ) – Default roughness value when roughness is not set and the asset does not have a roughness texture. Defaults to 1.0. vis_mode ( str | None , optional ) – How the entity should be visualized. Possible values are [‘visual’, ‘particle’, ‘collision’, ‘sdf’, ‘recon’]. ’visual’: Render the entity’s visual geometry. ’collision’: Render the entity’s collision geometry. ’particle’: Render the entity’s particle representation (if applicable). ’sdf’: Render the reconstructed surface mesh of the entity’s sdf. ’recon’: Render the reconstructed surface mesh of the entity’s particle representation. smooth ( bool , optional ) – Whether to smooth face normals by interpolating vertex normals. double_sided ( bool | None , optional ) – Whether to render both sides of the surface. Useful for non-watertight 2D objects. Defaults to True for Cloth material and False for others. beam_angle ( float ) – The beam angle of emission. Defaults to 180.0. normal_diff_clamp ( float , optional ) – Controls the threshold for computing surface normals by interpolating vertex normals. recon_backend ( str , optional ) – Backend for surface reconstruction. Possible values are [‘splashsurf’, ‘openvdb’]. generate_foam ( bool , optional ) – Whether to generate foam particles for visual effects for particle-based entities. foam_options ( gs.options.FoamOptions , optional ) – Options for foam generation.
gs.morphs.Terrain # class genesis.options.morphs. Terrain ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = False , randomize : bool = False , n_subterrains : Tuple [ int , int ] = (3, 3) , subterrain_size : Tuple [ float , float ] = (12.0, 12.0) , horizontal_scale : float = 0.25 , vertical_scale : float = 0.005 , subterrain_types : Any = [['flat_terrain', 'random_uniform_terrain', 'stepping_stones_terrain'], ['pyramid_sloped_terrain', 'discrete_obstacles_terrain', 'wave_terrain'], ['random_uniform_terrain', 'pyramid_stairs_terrain', 'sloped_terrain']] , height_field : Any = None ) [source] # Morph for creating a rigid terrain. This can be instantiated from two choices: 1) a grid of subterrains generated using the given configurations, 2) a terrain generated using the given height field. If randomize is True, subterrain type that involves randomness will have random parameters. Otherwise, they will use fixed random seed 0. Users can easily configure the subterrain types by specifying the subterrain_types parameter. If using a single string, it will be repeated for all subterrains. If it’s a 2D list, it should have the same shape as n_subterrains . The supported subterrain types are: ‘flat_terrain’: flat terrain ‘random_uniform_terrain’: random uniform terrain ‘sloped_terrain’: sloped terrain ‘pyramid_sloped_terrain’: pyramid sloped terrain ‘discrete_obstacles_terrain’: discrete obstacles terrain ‘wave_terrain’: wave terrain ‘stairs_terrain’: stairs terrain ‘pyramid_stairs_terrain’: pyramid stairs terrain ‘stepping_stones_terrain’: stepping stones terrain Note Rigid terrain will also be represented as SDF for collision checking, but its resolution is auto-computed and ignores the value specified in gs.materials.Rigid() . Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. randomize ( bool , optional ) – Whether to randomize the subterrains that involve randomness. Defaults to False. n_subterrains ( tuple of int , optional ) – The number of subterrains in x and y directions. Defaults to (3, 3). subterrain_size ( tuple of float , optional ) – The size of each subterrain in meters. Defaults to (12.0, 12.0). horizontal_scale ( float , optional ) – The size of each cell in the subterrain in meters. Defaults to 0.25. vertical_scale ( float , optional ) – The height of each step in the subterrain in meters. Defaults to 0.005. subterrain_types ( str or 2D list of str , optional ) – The types of subterrains to generate. If a string, it will be repeated for all subterrains. If a 2D list, it should have the same shape as n_subterrains . height_field ( array-like , optional ) – The height field to generate the terrain. If specified, all other configurations will be ignored. Defaults to None.
gs.textures.Texture # class genesis.options.textures. Texture [source] # Bases: Options Base class for Genesis’s texture objects. Note This class should not be instantiated directly.
gs.options.ToolOptions # class genesis.options.solvers. ToolOptions ( * , dt : float | None = None , floor_height : float = None ) [source] # Options configuring the ToolSolver. Note ToolEntity is a simplified form of RigidEntity. It supports one way tool->other coupling, but has no internal dynamics and can only be created from a single mesh. This is a temporal workaround for differentiable rigid-soft interaction. This solver will be removed once differentiable mode is supported by the RigidSolver. Parameters : dt ( float , optional ) – Time duration for each simulation step in seconds. Defaults to 1e-2. floor_height ( float , optional ) – Height of the floor in meters. Defaults to 0.0.
gs.morphs.URDF # class genesis.options.morphs. URDF ( * , pos : tuple = (0.0, 0.0, 0.0) , euler : tuple | None = (0.0, 0.0, 0.0) , quat : tuple | None = None , visualization : bool = True , collision : bool = True , requires_jac_and_IK : bool = True , file : Any = '' , scale : float | tuple = 1.0 , convexify : bool | None = None , recompute_inertia : bool = False , fixed : bool = False , prioritize_urdf_material : bool = False , merge_fixed_links : bool = True , links_to_keep : List [ str ] = [] ) [source] # Morph loaded from a URDF file. This morph only supports RigidEntity . If you need to create a Drone entity, use gs.morphs.Drone instead. Note As part of performance optimization, links connected via a fixed joint are merged if merge_fixed_links is True. This is turned on by default, and can help improve simulation speed without affecting any dynamics and rendering behaviors. However, in cases where certain links are still needed as independent links, such as virtual end-effector links created for being used as IK targets, these links will not be merged if their names are added to links_to_keep . You can also completely turn off link merging by setting merge_fixed_links to False, but it’s recommended to use merge_fixed_links=True in combination with links_to_keep for better performance. Parameters : file ( str ) – The path to the file. scale ( float or tuple , optional ) – The scaling factor for the size of the entity. If a float, it scales uniformly. If a 3-tuple, it scales along each axis. Defaults to 1.0. Note that 3-tuple scaling is only supported for gs.morphs.Mesh . pos ( tuple , shape ( 3 , ) , optional ) – The position of the entity in meters. Defaults to (0.0, 0.0, 0.0). euler ( tuple , shape ( 3 , ) , optional ) – The euler angle of the entity in degrees. This follows scipy’s extrinsic x-y-z rotation convention. Defaults to (0.0, 0.0, 0.0). quat ( tuple , shape ( 4 , ) , optional ) – The quaternion (w-x-y-z convention) of the entity. If specified, euler will be ignored. Defaults to None. convexify ( bool , optional ) – Whether to convexify the entity. When convexify is True, all the meshes in the entity will be converted to a convex hull. If not given, it defaults to True for RigidEntity and False for other deformable entities. visualization ( bool , optional ) – Whether the entity needs to be visualized. Set it to False if you need a invisible object only for collision purposes. Defaults to True. visualization and collision cannot both be False. collision ( bool , optional ) – Whether the entity needs to be considered for collision checking. Defaults to True. visualization and collision cannot both be False. requires_jac_and_IK ( bool , optional ) – Whether this morph, if created as RigidEntity , requires jacobian and inverse kinematics. Defaults to True. fixed ( bool , optional ) – Whether the baselink of the entity should be fixed. Defaults to False. prioritize_urdf_material ( bool , optional ) – Sometimes a geom in a urdf file will be assigned a color, and the geom asset file also contains its own visual material. This parameter controls whether to prioritize the URDF-defined material over the asset’s own material. Defaults to False. merge_fixed_links ( bool , optional ) – Whether to merge links connected via a fixed joint. Defaults to True. links_to_keep ( list of str , optional ) – A list of link names that should not be skipped during link merging. Defaults to [].
gs.options.ViewerOptions # class genesis.options. ViewerOptions ( * , res : tuple | None = None , refresh_rate : int = 60 , max_FPS : int | None = 60 , camera_pos : tuple = (3.5, 0.5, 2.5) , camera_lookat : tuple = (0.0, 0.0, 0.5) , camera_up : tuple = (0.0, 0.0, 1.0) , camera_fov : float = 40 ) [source] # Bases: Options Options configuring preperties of the interactive viewer. Note The viewer’s camera uses the Rasterizer backend regardless of gs.renderers.* when creating the scene. Parameters : res ( tuple , shape ( 2 , ) , optional ) – The resolution of the viewer. If not set, will auto-compute using resolution of the connected display. refresh_rate ( int ) – The refresh rate of the viewer. max_FPS ( int | None ) – The FPS (frames per second) the viewer will be capped at. Note that this will also synchronize the simulation speed. If not set, the viewer will render at maximum speed. camera_pos ( tuple of float , shape ( 3 , ) ) – The position of the viewer’s camera. camera_lookat ( tuple of float , shape ( 3 , ) ) – The lookat position that the camera. camera_up ( tuple of float , shape ( 3 , ) ) – The up vector of the camera’s extrinsic pose. camera_fov ( float ) – The field of view (in degrees) of the camera.
gs.options.VisOptions # class genesis.options. VisOptions ( * , show_world_frame : bool = True , world_frame_size : float = 1.0 , show_link_frame : bool = False , link_frame_size : float = 0.2 , show_cameras : bool = False , shadow : bool = True , plane_reflection : bool = False , background_color : tuple = (0.04, 0.08, 0.12) , ambient_light : tuple = (0.1, 0.1, 0.1) , visualize_mpm_boundary : bool = False , visualize_sph_boundary : bool = False , visualize_pbd_boundary : bool = False , segmentation_level : str = 'link' , render_particle_as : str = 'sphere' , particle_size_scale : float = 1.0 , contact_force_scale : float = 0.01 , n_support_neighbors : int = 12 , n_rendered_envs : int | None = None , lights : list = [{'type': 'directional', 'dir': (-1, -1, -1), 'color': (1.0, 1.0, 1.0), 'intensity': 5.0}] ) [source] # Bases: Options This configures visualization-related properties that are independent of the viewer or camera. Parameters : show_world_frame ( bool ) – Whether to visualize the world frame. world_frame_size ( float ) – The length (in meters) of the world frame’s axes. show_link_frame ( bool ) – Whether to visualize the frames of each RigidLink. link_frame_size ( float ) – The length (in meters) of the link frames’ axes. show_cameras ( bool ) – Whether to render the cameras added to the scene, together with their frustums. shadow ( bool ) – Whether to render shadow. plane_reflection ( bool ) – Whether to render plane reflection. Defaults to False. background_color ( tuple of float , shape ( 3 , ) ) – The color of the scene background. ambient_light ( tuple of float , shape ( 3 , ) ) – The color of the scene’s ambient light. visualize_mpm_boundary ( bool ) – Whether to visualize the boundary of the MPM Solver. visualize_sph_boundary ( bool ) – Whether to visualize the boundary of the SPH Solver. visualize_pbd_boundary ( bool ) – Whether to visualize the boundary of the PBD Solver. segmentation_level ( str ) – The segmentation level used for segmentation mask rendering. Should be one of [‘entity’, ‘link’, ‘geom’]. Defaults to ‘link’. render_particle_as ( str ) – How particles in the scene should be rendered. Should be one of [‘sphere’, ‘tet’]. Defaults to ‘sphere’. particle_size_scale ( float ) – Scale applied to actual particle size for rendering. Defaults to 1.0. contact_force_scale ( float = 0.02 ) – Scale for contact arrow visualization, m/N. E.g. the force arrow representing 10N will be 0.2m long if scale is 0.02. Defaults to 0.02. n_support_neighbors ( int ) – Number of supporting neighbor particles used to compute vertex position of the visual mesh. Used for rendering deformable bodies. Defaults to 12. n_rendered_envs ( int , optional ) – Number of environments with being rendered. If None, all environments will be rendered. Defaults to None. lights ( list of dict. ) – Lights added to the scene.
gs.surfaces.Water # class genesis.options.surfaces. Water ( * , color : tuple = (0.61, 0.98, 0.93) , opacity : float | None = None , roughness : float = 0.2 , metallic : float | None = None , emissive : tuple | None = None , ior : float = 1.2 , opacity_texture : Texture | None = None , roughness_texture : Texture | None = None , metallic_texture : Texture | None = None , normal_texture : Texture | None = None , emissive_texture : Texture | None = None , default_roughness : float = 1.0 , vis_mode : str | None = None , smooth : bool = True , double_sided : bool | None = None , beam_angle : float = 180 , normal_diff_clamp : float = 180 , recon_backend : str = 'splashsurf' , generate_foam : bool = False , foam_options : FoamOptions | None = None , subsurface : bool = False , thickness : float | None = None , thickness_texture : Texture | None = None , specular_texture : Texture | None = None , transmission_texture : Texture | None = None ) [source] # Shortcut for a water surface (using Glass surface with proper values).